
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a86  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00000a86  00000b1a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  0080006a  0080006a  00000b24  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b24  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000b54  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cf2  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000546  00000000  00000000  000018fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000522  00000000  00000000  00001e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000254  00000000  00000000  00002368  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000504  00000000  00000000  000025bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000832  00000000  00000000  00002ac0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f8  00000000  00000000  000032f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	9c c3       	rjmp	.+1848   	; 0x740 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	e6 e8       	ldi	r30, 0x86	; 134
  32:	fa e0       	ldi	r31, 0x0A	; 10
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	aa 36       	cpi	r26, 0x6A	; 106
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	aa e6       	ldi	r26, 0x6A	; 106
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a6 39       	cpi	r26, 0x96	; 150
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	b5 d2       	rcall	.+1386   	; 0x5bc <main>
  52:	15 c5       	rjmp	.+2602   	; 0xa7e <exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_capsense>:
	for (uint8_t i = 0; i < samples; i++) {    // loop for samples parameter - simple lowpass filter
		if (SenseOneCycle(capsense_handle) < 0)  return -2;   // variable over timeout
	}

	return capsense_handle->total;
}
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
{
	capsense_handle->CS_Timeout_Micros = timeout_micros;
}

void init_capsense( capsense_state_TypeDef* capsense_handle )
{
  5a:	ec 01       	movw	r28, r24
	//Init variables for capsense:
	capsense_handle->error = 1;
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	88 83       	st	Y, r24

	capsense_handle->CS_Timeout_Micros = 300;
  60:	4c e2       	ldi	r20, 0x2C	; 44
  62:	51 e0       	ldi	r21, 0x01	; 1
  64:	60 e0       	ldi	r22, 0x00	; 0
  66:	70 e0       	ldi	r23, 0x00	; 0
  68:	4d 83       	std	Y+5, r20	; 0x05
  6a:	5e 83       	std	Y+6, r21	; 0x06
  6c:	6f 83       	std	Y+7, r22	; 0x07
  6e:	78 87       	std	Y+8, r23	; 0x08
	capsense_handle->CS_Autocal_Millis = 20000;
  70:	40 e2       	ldi	r20, 0x20	; 32
  72:	5e e4       	ldi	r21, 0x4E	; 78
  74:	60 e0       	ldi	r22, 0x00	; 0
  76:	70 e0       	ldi	r23, 0x00	; 0
  78:	49 87       	std	Y+9, r20	; 0x09
  7a:	5a 87       	std	Y+10, r21	; 0x0a
  7c:	6b 87       	std	Y+11, r22	; 0x0b
  7e:	7c 87       	std	Y+12, r23	; 0x0c
		
	capsense_handle->leastTotal = 0x0FFFFFFFL;
  80:	4f ef       	ldi	r20, 0xFF	; 255
  82:	5f ef       	ldi	r21, 0xFF	; 255
  84:	6f ef       	ldi	r22, 0xFF	; 255
  86:	7f e0       	ldi	r23, 0x0F	; 15
  88:	49 83       	std	Y+1, r20	; 0x01
  8a:	5a 83       	std	Y+2, r21	; 0x02
  8c:	6b 83       	std	Y+3, r22	; 0x03
  8e:	7c 83       	std	Y+4, r23	; 0x04
	capsense_handle->lastCal = millis();
  90:	92 d3       	rcall	.+1828   	; 0x7b6 <millis>
  92:	6d 87       	std	Y+13, r22	; 0x0d
  94:	7e 87       	std	Y+14, r23	; 0x0e
  96:	8f 87       	std	Y+15, r24	; 0x0f
  98:	98 8b       	std	Y+16, r25	; 0x10
}
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <SenseOneCycle>:

int32_t SenseOneCycle( capsense_state_TypeDef* capsense_handle )
{
  a0:	8f 92       	push	r8
  a2:	9f 92       	push	r9
  a4:	af 92       	push	r10
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	28 97       	sbiw	r28, 0x08	; 8
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	8c 01       	movw	r16, r24
	volatile uint32_t lastIncrementTime = 0;
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	1a 82       	std	Y+2, r1	; 0x02
  ce:	1b 82       	std	Y+3, r1	; 0x03
  d0:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t minIncrementDelay = 10; //µs
	volatile uint32_t cycleTime = 0;
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
	uint32_t cycleTotal = 0;
	cli();
  da:	f8 94       	cli
	PORTB &= ~(1<<PORTB1);
  dc:	c1 98       	cbi	0x18, 1	; 24
	DDRB &= ~(1<<DDB2);
  de:	ba 98       	cbi	0x17, 2	; 23
	DDRB |= (1<<DDB2);
  e0:	ba 9a       	sbi	0x17, 2	; 23
	PORTB &= ~(1<<PORTB2);
  e2:	c2 98       	cbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e4:	8a e1       	ldi	r24, 0x1A	; 26
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <SenseOneCycle+0x46>
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
  ea:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<PORTB1);
  ec:	c1 9a       	sbi	0x18, 1	; 24
	sei();
  ee:	78 94       	sei
int32_t SenseOneCycle( capsense_state_TypeDef* capsense_handle )
{
	volatile uint32_t lastIncrementTime = 0;
	uint32_t minIncrementDelay = 10; //µs
	volatile uint32_t cycleTime = 0;
	uint32_t cycleTotal = 0;
  f0:	c1 2c       	mov	r12, r1
  f2:	d1 2c       	mov	r13, r1
  f4:	76 01       	movw	r14, r12
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
	PORTB |= (1<<PORTB1);
	sei();
	
	while ( !(PINB & (1<<PINB2)) && ( cycleTotal < capsense_handle->CS_Timeout_Micros ) )
  f6:	61 c0       	rjmp	.+194    	; 0x1ba <SenseOneCycle+0x11a>
	{
		//Timestamp of the current measurement:
		cycleTime = (millis()*1000 + micros());
  f8:	5e d3       	rcall	.+1724   	; 0x7b6 <millis>
  fa:	4b 01       	movw	r8, r22
  fc:	5c 01       	movw	r10, r24
  fe:	64 d3       	rcall	.+1736   	; 0x7c8 <micros>
 100:	b5 01       	movw	r22, r10
 102:	a4 01       	movw	r20, r8
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	66 1f       	adc	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	66 1f       	adc	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	66 1f       	adc	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	4a 01       	movw	r8, r20
 11e:	5b 01       	movw	r10, r22
 120:	88 0c       	add	r8, r8
 122:	99 1c       	adc	r9, r9
 124:	aa 1c       	adc	r10, r10
 126:	bb 1c       	adc	r11, r11
 128:	88 0c       	add	r8, r8
 12a:	99 1c       	adc	r9, r9
 12c:	aa 1c       	adc	r10, r10
 12e:	bb 1c       	adc	r11, r11
 130:	48 0d       	add	r20, r8
 132:	59 1d       	adc	r21, r9
 134:	6a 1d       	adc	r22, r10
 136:	7b 1d       	adc	r23, r11
 138:	4a 01       	movw	r8, r20
 13a:	5b 01       	movw	r10, r22
 13c:	88 0c       	add	r8, r8
 13e:	99 1c       	adc	r9, r9
 140:	aa 1c       	adc	r10, r10
 142:	bb 1c       	adc	r11, r11
 144:	88 0c       	add	r8, r8
 146:	99 1c       	adc	r9, r9
 148:	aa 1c       	adc	r10, r10
 14a:	bb 1c       	adc	r11, r11
 14c:	48 0d       	add	r20, r8
 14e:	59 1d       	adc	r21, r9
 150:	6a 1d       	adc	r22, r10
 152:	7b 1d       	adc	r23, r11
 154:	4a 01       	movw	r8, r20
 156:	5b 01       	movw	r10, r22
 158:	88 0c       	add	r8, r8
 15a:	99 1c       	adc	r9, r9
 15c:	aa 1c       	adc	r10, r10
 15e:	bb 1c       	adc	r11, r11
 160:	88 0c       	add	r8, r8
 162:	99 1c       	adc	r9, r9
 164:	aa 1c       	adc	r10, r10
 166:	bb 1c       	adc	r11, r11
 168:	48 0d       	add	r20, r8
 16a:	59 1d       	adc	r21, r9
 16c:	6a 1d       	adc	r22, r10
 16e:	7b 1d       	adc	r23, r11
 170:	48 0f       	add	r20, r24
 172:	59 1f       	adc	r21, r25
 174:	61 1d       	adc	r22, r1
 176:	71 1d       	adc	r23, r1
 178:	4d 83       	std	Y+5, r20	; 0x05
 17a:	5e 83       	std	Y+6, r21	; 0x06
 17c:	6f 83       	std	Y+7, r22	; 0x07
 17e:	78 87       	std	Y+8, r23	; 0x08
		
		//Increment the value only if it is time to increment:
		if ( (cycleTime - lastIncrementTime) >= minIncrementDelay )
 180:	8d 81       	ldd	r24, Y+5	; 0x05
 182:	9e 81       	ldd	r25, Y+6	; 0x06
 184:	af 81       	ldd	r26, Y+7	; 0x07
 186:	b8 85       	ldd	r27, Y+8	; 0x08
 188:	49 81       	ldd	r20, Y+1	; 0x01
 18a:	5a 81       	ldd	r21, Y+2	; 0x02
 18c:	6b 81       	ldd	r22, Y+3	; 0x03
 18e:	7c 81       	ldd	r23, Y+4	; 0x04
 190:	84 1b       	sub	r24, r20
 192:	95 0b       	sbc	r25, r21
 194:	a6 0b       	sbc	r26, r22
 196:	b7 0b       	sbc	r27, r23
 198:	0a 97       	sbiw	r24, 0x0a	; 10
 19a:	a1 05       	cpc	r26, r1
 19c:	b1 05       	cpc	r27, r1
 19e:	68 f0       	brcs	.+26     	; 0x1ba <SenseOneCycle+0x11a>
		{
			cycleTotal += minIncrementDelay;
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	c8 0e       	add	r12, r24
 1a4:	d1 1c       	adc	r13, r1
 1a6:	e1 1c       	adc	r14, r1
 1a8:	f1 1c       	adc	r15, r1
			lastIncrementTime = cycleTime;
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	af 81       	ldd	r26, Y+7	; 0x07
 1b0:	b8 85       	ldd	r27, Y+8	; 0x08
 1b2:	89 83       	std	Y+1, r24	; 0x01
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	ab 83       	std	Y+3, r26	; 0x03
 1b8:	bc 83       	std	Y+4, r27	; 0x04
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
	PORTB |= (1<<PORTB1);
	sei();
	
	while ( !(PINB & (1<<PINB2)) && ( cycleTotal < capsense_handle->CS_Timeout_Micros ) )
 1ba:	b2 99       	sbic	0x16, 2	; 22
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <SenseOneCycle+0x134>
 1be:	f8 01       	movw	r30, r16
 1c0:	85 81       	ldd	r24, Z+5	; 0x05
 1c2:	96 81       	ldd	r25, Z+6	; 0x06
 1c4:	a7 81       	ldd	r26, Z+7	; 0x07
 1c6:	b0 85       	ldd	r27, Z+8	; 0x08
 1c8:	c8 16       	cp	r12, r24
 1ca:	d9 06       	cpc	r13, r25
 1cc:	ea 06       	cpc	r14, r26
 1ce:	fb 06       	cpc	r15, r27
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <SenseOneCycle+0x134>
 1d2:	92 cf       	rjmp	.-220    	; 0xf8 <SenseOneCycle+0x58>
			lastIncrementTime = cycleTime;
		}
	}

	//Add this cycles total time to the accumulated total:
	capsense_handle->total += cycleTotal;
 1d4:	f8 01       	movw	r30, r16
 1d6:	81 89       	ldd	r24, Z+17	; 0x11
 1d8:	92 89       	ldd	r25, Z+18	; 0x12
 1da:	a3 89       	ldd	r26, Z+19	; 0x13
 1dc:	b4 89       	ldd	r27, Z+20	; 0x14
 1de:	8c 0d       	add	r24, r12
 1e0:	9d 1d       	adc	r25, r13
 1e2:	ae 1d       	adc	r26, r14
 1e4:	bf 1d       	adc	r27, r15
 1e6:	81 8b       	std	Z+17, r24	; 0x11
 1e8:	92 8b       	std	Z+18, r25	; 0x12
 1ea:	a3 8b       	std	Z+19, r26	; 0x13
 1ec:	b4 8b       	std	Z+20, r27	; 0x14

	cli();
 1ee:	f8 94       	cli
	PORTB |= (1<<PORTB2);
 1f0:	c2 9a       	sbi	0x18, 2	; 24
	DDRB |= (1<<DDB2);
 1f2:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= (1<<PORTB2);
 1f4:	c2 9a       	sbi	0x18, 2	; 24
	DDRB &= ~(1<<DDB2);
 1f6:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= ~(1<<PORTB1);
 1f8:	c1 98       	cbi	0x18, 1	; 24
	sei();
 1fa:	78 94       	sei

	DDRB |= (1<<DDB2);
 1fc:	ba 9a       	sbi	0x17, 2	; 23
	PORTB &= ~(1<<PORTB2);
 1fe:	c2 98       	cbi	0x18, 2	; 24
 200:	8a e1       	ldi	r24, 0x1A	; 26
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <SenseOneCycle+0x162>
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
 206:	ba 98       	cbi	0x17, 2	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 208:	88 ec       	ldi	r24, 0xC8	; 200
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <SenseOneCycle+0x16c>
	
	_delay_us(100);

	if (cycleTotal >= capsense_handle->CS_Timeout_Micros)
 210:	f8 01       	movw	r30, r16
 212:	85 81       	ldd	r24, Z+5	; 0x05
 214:	96 81       	ldd	r25, Z+6	; 0x06
 216:	a7 81       	ldd	r26, Z+7	; 0x07
 218:	b0 85       	ldd	r27, Z+8	; 0x08
 21a:	c8 16       	cp	r12, r24
 21c:	d9 06       	cpc	r13, r25
 21e:	ea 06       	cpc	r14, r26
 220:	fb 06       	cpc	r15, r27
 222:	28 f0       	brcs	.+10     	; 0x22e <SenseOneCycle+0x18e>
	{
		return -2;     // total variable over timeout
 224:	6e ef       	ldi	r22, 0xFE	; 254
 226:	7f ef       	ldi	r23, 0xFF	; 255
 228:	8f ef       	ldi	r24, 0xFF	; 255
 22a:	9f ef       	ldi	r25, 0xFF	; 255
 22c:	04 c0       	rjmp	.+8      	; 0x236 <SenseOneCycle+0x196>
	}
	else
	{
		return 1;
 22e:	61 e0       	ldi	r22, 0x01	; 1
 230:	70 e0       	ldi	r23, 0x00	; 0
 232:	80 e0       	ldi	r24, 0x00	; 0
 234:	90 e0       	ldi	r25, 0x00	; 0
	}
 236:	28 96       	adiw	r28, 0x08	; 8
 238:	0f b6       	in	r0, 0x3f	; 63
 23a:	f8 94       	cli
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	0f be       	out	0x3f, r0	; 63
 240:	cd bf       	out	0x3d, r28	; 61
 242:	df 91       	pop	r29
 244:	cf 91       	pop	r28
 246:	1f 91       	pop	r17
 248:	0f 91       	pop	r16
 24a:	ff 90       	pop	r15
 24c:	ef 90       	pop	r14
 24e:	df 90       	pop	r13
 250:	cf 90       	pop	r12
 252:	bf 90       	pop	r11
 254:	af 90       	pop	r10
 256:	9f 90       	pop	r9
 258:	8f 90       	pop	r8
 25a:	08 95       	ret

0000025c <capacitiveSensor>:
#include "capsense.h"
#include "delay_mod.h"
#include <stdlib.h>

int32_t capacitiveSensor( capsense_state_TypeDef* capsense_handle, uint8_t samples )
{
 25c:	0f 93       	push	r16
 25e:	1f 93       	push	r17
 260:	cf 93       	push	r28
 262:	df 93       	push	r29
 264:	ec 01       	movw	r28, r24
 266:	06 2f       	mov	r16, r22
	capsense_handle->total = 0;
 268:	19 8a       	std	Y+17, r1	; 0x11
 26a:	1a 8a       	std	Y+18, r1	; 0x12
 26c:	1b 8a       	std	Y+19, r1	; 0x13
 26e:	1c 8a       	std	Y+20, r1	; 0x14
	if (samples == 0) return 0;
 270:	66 23       	and	r22, r22
 272:	09 f4       	brne	.+2      	; 0x276 <__stack+0x17>
 274:	62 c0       	rjmp	.+196    	; 0x33a <__stack+0xdb>
	if (capsense_handle->error < 0) return -1;            // bad pin
 276:	88 81       	ld	r24, Y
 278:	88 23       	and	r24, r24
 27a:	0c f4       	brge	.+2      	; 0x27e <__stack+0x1f>
 27c:	62 c0       	rjmp	.+196    	; 0x342 <__stack+0xe3>
 27e:	10 e0       	ldi	r17, 0x00	; 0

	for (uint8_t i = 0; i < samples; i++)
	{    // loop for samples parameter - simple lowpass filter
		if (SenseOneCycle(capsense_handle) < 0)  return -2;   // variable over timeout
 280:	ce 01       	movw	r24, r28
 282:	0e df       	rcall	.-484    	; 0xa0 <SenseOneCycle>
 284:	99 23       	and	r25, r25
 286:	0c f4       	brge	.+2      	; 0x28a <__stack+0x2b>
 288:	60 c0       	rjmp	.+192    	; 0x34a <__stack+0xeb>
{
	capsense_handle->total = 0;
	if (samples == 0) return 0;
	if (capsense_handle->error < 0) return -1;            // bad pin

	for (uint8_t i = 0; i < samples; i++)
 28a:	1f 5f       	subi	r17, 0xFF	; 255
 28c:	10 13       	cpse	r17, r16
 28e:	f8 cf       	rjmp	.-16     	; 0x280 <__stack+0x21>
	}

		// only calibrate if time is greater than CS_AutocaL_Millis and total is less than 10% of baseline
		// this is an attempt to keep from calibrating when the sensor is seeing a "touched" signal

		if ( (millis() - capsense_handle->lastCal > capsense_handle->CS_Autocal_Millis) && abs(capsense_handle->total  - capsense_handle->leastTotal) < (int)(.10 * (float)capsense_handle->leastTotal) ) {
 290:	92 d2       	rcall	.+1316   	; 0x7b6 <millis>
 292:	0d 85       	ldd	r16, Y+13	; 0x0d
 294:	1e 85       	ldd	r17, Y+14	; 0x0e
 296:	2f 85       	ldd	r18, Y+15	; 0x0f
 298:	38 89       	ldd	r19, Y+16	; 0x10
 29a:	ab 01       	movw	r20, r22
 29c:	bc 01       	movw	r22, r24
 29e:	40 1b       	sub	r20, r16
 2a0:	51 0b       	sbc	r21, r17
 2a2:	62 0b       	sbc	r22, r18
 2a4:	73 0b       	sbc	r23, r19
 2a6:	89 85       	ldd	r24, Y+9	; 0x09
 2a8:	9a 85       	ldd	r25, Y+10	; 0x0a
 2aa:	ab 85       	ldd	r26, Y+11	; 0x0b
 2ac:	bc 85       	ldd	r27, Y+12	; 0x0c
 2ae:	84 17       	cp	r24, r20
 2b0:	95 07       	cpc	r25, r21
 2b2:	a6 07       	cpc	r26, r22
 2b4:	b7 07       	cpc	r27, r23
 2b6:	28 f5       	brcc	.+74     	; 0x302 <__stack+0xa3>
 2b8:	69 81       	ldd	r22, Y+1	; 0x01
 2ba:	7a 81       	ldd	r23, Y+2	; 0x02
 2bc:	8b 81       	ldd	r24, Y+3	; 0x03
 2be:	9c 81       	ldd	r25, Y+4	; 0x04
 2c0:	29 89       	ldd	r18, Y+17	; 0x11
 2c2:	3a 89       	ldd	r19, Y+18	; 0x12
 2c4:	26 1b       	sub	r18, r22
 2c6:	37 0b       	sbc	r19, r23
 2c8:	89 01       	movw	r16, r18
 2ca:	22 f4       	brpl	.+8      	; 0x2d4 <__stack+0x75>
 2cc:	00 27       	eor	r16, r16
 2ce:	11 27       	eor	r17, r17
 2d0:	02 1b       	sub	r16, r18
 2d2:	13 0b       	sbc	r17, r19
 2d4:	b3 d2       	rcall	.+1382   	; 0x83c <__floatunsisf>
 2d6:	2d ec       	ldi	r18, 0xCD	; 205
 2d8:	3c ec       	ldi	r19, 0xCC	; 204
 2da:	4c ec       	ldi	r20, 0xCC	; 204
 2dc:	5d e3       	ldi	r21, 0x3D	; 61
 2de:	3c d3       	rcall	.+1656   	; 0x958 <__mulsf3>
 2e0:	7c d2       	rcall	.+1272   	; 0x7da <__fixsfsi>
 2e2:	06 17       	cp	r16, r22
 2e4:	17 07       	cpc	r17, r23
 2e6:	6c f4       	brge	.+26     	; 0x302 <__stack+0xa3>

			capsense_handle->leastTotal = 0x0FFFFFFFL;          // reset for "autocalibrate"
 2e8:	8f ef       	ldi	r24, 0xFF	; 255
 2ea:	9f ef       	ldi	r25, 0xFF	; 255
 2ec:	af ef       	ldi	r26, 0xFF	; 255
 2ee:	bf e0       	ldi	r27, 0x0F	; 15
 2f0:	89 83       	std	Y+1, r24	; 0x01
 2f2:	9a 83       	std	Y+2, r25	; 0x02
 2f4:	ab 83       	std	Y+3, r26	; 0x03
 2f6:	bc 83       	std	Y+4, r27	; 0x04
			capsense_handle->lastCal = millis();
 2f8:	5e d2       	rcall	.+1212   	; 0x7b6 <millis>
 2fa:	6d 87       	std	Y+13, r22	; 0x0d
 2fc:	7e 87       	std	Y+14, r23	; 0x0e
 2fe:	8f 87       	std	Y+15, r24	; 0x0f
 300:	98 8b       	std	Y+16, r25	; 0x10
		}

	// routine to subtract baseline (non-sensed capacitance) from sensor return
	if (capsense_handle->total < capsense_handle->leastTotal) capsense_handle->leastTotal = capsense_handle->total;                 // set floor value to subtract from sensed value
 302:	89 89       	ldd	r24, Y+17	; 0x11
 304:	9a 89       	ldd	r25, Y+18	; 0x12
 306:	ab 89       	ldd	r26, Y+19	; 0x13
 308:	bc 89       	ldd	r27, Y+20	; 0x14
 30a:	09 81       	ldd	r16, Y+1	; 0x01
 30c:	1a 81       	ldd	r17, Y+2	; 0x02
 30e:	2b 81       	ldd	r18, Y+3	; 0x03
 310:	3c 81       	ldd	r19, Y+4	; 0x04
 312:	80 17       	cp	r24, r16
 314:	91 07       	cpc	r25, r17
 316:	a2 07       	cpc	r26, r18
 318:	b3 07       	cpc	r27, r19
 31a:	20 f4       	brcc	.+8      	; 0x324 <__stack+0xc5>
 31c:	89 83       	std	Y+1, r24	; 0x01
 31e:	9a 83       	std	Y+2, r25	; 0x02
 320:	ab 83       	std	Y+3, r26	; 0x03
 322:	bc 83       	std	Y+4, r27	; 0x04
	return(capsense_handle->total - capsense_handle->leastTotal);
 324:	09 81       	ldd	r16, Y+1	; 0x01
 326:	1a 81       	ldd	r17, Y+2	; 0x02
 328:	2b 81       	ldd	r18, Y+3	; 0x03
 32a:	3c 81       	ldd	r19, Y+4	; 0x04
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	60 1b       	sub	r22, r16
 332:	71 0b       	sbc	r23, r17
 334:	82 0b       	sbc	r24, r18
 336:	93 0b       	sbc	r25, r19
 338:	0c c0       	rjmp	.+24     	; 0x352 <__stack+0xf3>
#include <stdlib.h>

int32_t capacitiveSensor( capsense_state_TypeDef* capsense_handle, uint8_t samples )
{
	capsense_handle->total = 0;
	if (samples == 0) return 0;
 33a:	60 e0       	ldi	r22, 0x00	; 0
 33c:	70 e0       	ldi	r23, 0x00	; 0
 33e:	cb 01       	movw	r24, r22
 340:	08 c0       	rjmp	.+16     	; 0x352 <__stack+0xf3>
	if (capsense_handle->error < 0) return -1;            // bad pin
 342:	6f ef       	ldi	r22, 0xFF	; 255
 344:	7f ef       	ldi	r23, 0xFF	; 255
 346:	cb 01       	movw	r24, r22
 348:	04 c0       	rjmp	.+8      	; 0x352 <__stack+0xf3>

	for (uint8_t i = 0; i < samples; i++)
	{    // loop for samples parameter - simple lowpass filter
		if (SenseOneCycle(capsense_handle) < 0)  return -2;   // variable over timeout
 34a:	6e ef       	ldi	r22, 0xFE	; 254
 34c:	7f ef       	ldi	r23, 0xFF	; 255
 34e:	8f ef       	ldi	r24, 0xFF	; 255
 350:	9f ef       	ldi	r25, 0xFF	; 255
		}

	// routine to subtract baseline (non-sensed capacitance) from sensor return
	if (capsense_handle->total < capsense_handle->leastTotal) capsense_handle->leastTotal = capsense_handle->total;                 // set floor value to subtract from sensed value
	return(capsense_handle->total - capsense_handle->leastTotal);
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <set_motor_direction>:
	llmod_handle->current_speed = 0;
}

void set_motor_direction( llmod_direction direction )
{
	switch ( direction )
 35c:	88 23       	and	r24, r24
 35e:	19 f0       	breq	.+6      	; 0x366 <set_motor_direction+0xa>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	21 f0       	breq	.+8      	; 0x36c <set_motor_direction+0x10>
 364:	08 95       	ret
	{
		case FORWARD:
			PORTB &= ~(1<<PB3);
 366:	c3 98       	cbi	0x18, 3	; 24
			PORTB |= (1<<PB4);
 368:	c4 9a       	sbi	0x18, 4	; 24
		break;
 36a:	08 95       	ret
		
		case BACKWARD:
			PORTB |= (1<<PB3);
 36c:	c3 9a       	sbi	0x18, 3	; 24
			PORTB &= ~(1<<PB4);
 36e:	c4 98       	cbi	0x18, 4	; 24
 370:	08 95       	ret

00000372 <set_motor_off>:
	
}

void set_motor_off()
{
	PORTB &= ~(1<<PB3);
 372:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~(1<<PB4);
 374:	c4 98       	cbi	0x18, 4	; 24
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 376:	8f ef       	ldi	r24, 0xFF	; 255
 378:	89 bd       	out	0x29, r24	; 41
 37a:	08 95       	ret

0000037c <pulse_motor>:
		break;
	}
}

void pulse_motor( uint32_t number_pulses, uint32_t pulse_length, uint32_t pulse_delay )
{
 37c:	2f 92       	push	r2
 37e:	3f 92       	push	r3
 380:	4f 92       	push	r4
 382:	5f 92       	push	r5
 384:	6f 92       	push	r6
 386:	7f 92       	push	r7
 388:	8f 92       	push	r8
 38a:	9f 92       	push	r9
 38c:	af 92       	push	r10
 38e:	bf 92       	push	r11
 390:	cf 92       	push	r12
 392:	df 92       	push	r13
 394:	ef 92       	push	r14
 396:	ff 92       	push	r15
 398:	0f 93       	push	r16
 39a:	1f 93       	push	r17
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	2c 97       	sbiw	r28, 0x0c	; 12
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
 3b0:	69 83       	std	Y+1, r22	; 0x01
 3b2:	7a 83       	std	Y+2, r23	; 0x02
 3b4:	8b 83       	std	Y+3, r24	; 0x03
 3b6:	9c 83       	std	Y+4, r25	; 0x04
 3b8:	2d 83       	std	Y+5, r18	; 0x05
 3ba:	3e 83       	std	Y+6, r19	; 0x06
 3bc:	4f 83       	std	Y+7, r20	; 0x07
 3be:	58 87       	std	Y+8, r21	; 0x08
 3c0:	e9 86       	std	Y+9, r14	; 0x09
 3c2:	fa 86       	std	Y+10, r15	; 0x0a
 3c4:	0b 87       	std	Y+11, r16	; 0x0b
 3c6:	1c 87       	std	Y+12, r17	; 0x0c
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 3c8:	19 bc       	out	0x29, r1	; 41
}

void pulse_motor( uint32_t number_pulses, uint32_t pulse_length, uint32_t pulse_delay )
{
	set_motor_speed(MAX_SPEED);
	for ( uint32_t i = 0; i < number_pulses; i++ )
 3ca:	89 81       	ldd	r24, Y+1	; 0x01
 3cc:	9a 81       	ldd	r25, Y+2	; 0x02
 3ce:	ab 81       	ldd	r26, Y+3	; 0x03
 3d0:	bc 81       	ldd	r27, Y+4	; 0x04
 3d2:	89 2b       	or	r24, r25
 3d4:	8a 2b       	or	r24, r26
 3d6:	8b 2b       	or	r24, r27
 3d8:	09 f4       	brne	.+2      	; 0x3dc <pulse_motor+0x60>
 3da:	92 c0       	rjmp	.+292    	; 0x500 <pulse_motor+0x184>
 3dc:	81 2c       	mov	r8, r1
 3de:	91 2c       	mov	r9, r1
 3e0:	54 01       	movw	r10, r8

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 3e2:	11 e0       	ldi	r17, 0x01	; 1
 3e4:	00 e0       	ldi	r16, 0x00	; 0
 3e6:	0f 2e       	mov	r0, r31
 3e8:	f8 ec       	ldi	r31, 0xC8	; 200
 3ea:	2f 2e       	mov	r2, r31
 3ec:	31 2c       	mov	r3, r1
 3ee:	f0 2d       	mov	r31, r0
	{
		set_motor_direction(BACKWARD);
 3f0:	81 e0       	ldi	r24, 0x01	; 1
 3f2:	b4 df       	rcall	.-152    	; 0x35c <set_motor_direction>
		_delay_ms(pulse_length);
 3f4:	6d 81       	ldd	r22, Y+5	; 0x05
 3f6:	7e 81       	ldd	r23, Y+6	; 0x06
 3f8:	8f 81       	ldd	r24, Y+7	; 0x07
 3fa:	98 85       	ldd	r25, Y+8	; 0x08
 3fc:	1f d2       	rcall	.+1086   	; 0x83c <__floatunsisf>
 3fe:	2b 01       	movw	r4, r22
 400:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 402:	20 e0       	ldi	r18, 0x00	; 0
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	4a ef       	ldi	r20, 0xFA	; 250
 408:	54 e4       	ldi	r21, 0x44	; 68
 40a:	a6 d2       	rcall	.+1356   	; 0x958 <__mulsf3>
 40c:	6b 01       	movw	r12, r22
 40e:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 410:	20 e0       	ldi	r18, 0x00	; 0
 412:	30 e0       	ldi	r19, 0x00	; 0
 414:	40 e8       	ldi	r20, 0x80	; 128
 416:	5f e3       	ldi	r21, 0x3F	; 63
 418:	dc d1       	rcall	.+952    	; 0x7d2 <__cmpsf2>
 41a:	88 23       	and	r24, r24
 41c:	0c f1       	brlt	.+66     	; 0x460 <pulse_motor+0xe4>
		__ticks = 1;
	else if (__tmp > 65535)
 41e:	20 e0       	ldi	r18, 0x00	; 0
 420:	3f ef       	ldi	r19, 0xFF	; 255
 422:	4f e7       	ldi	r20, 0x7F	; 127
 424:	57 e4       	ldi	r21, 0x47	; 71
 426:	c7 01       	movw	r24, r14
 428:	b6 01       	movw	r22, r12
 42a:	92 d2       	rcall	.+1316   	; 0x950 <__gesf2>
 42c:	18 16       	cp	r1, r24
 42e:	a4 f4       	brge	.+40     	; 0x458 <pulse_motor+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 430:	20 e0       	ldi	r18, 0x00	; 0
 432:	30 e0       	ldi	r19, 0x00	; 0
 434:	40 e2       	ldi	r20, 0x20	; 32
 436:	51 e4       	ldi	r21, 0x41	; 65
 438:	c3 01       	movw	r24, r6
 43a:	b2 01       	movw	r22, r4
 43c:	8d d2       	rcall	.+1306   	; 0x958 <__mulsf3>
 43e:	d2 d1       	rcall	.+932    	; 0x7e4 <__fixunssfsi>
		while(__ticks)
 440:	61 15       	cp	r22, r1
 442:	71 05       	cpc	r23, r1
 444:	91 f0       	breq	.+36     	; 0x46a <pulse_motor+0xee>
 446:	c1 01       	movw	r24, r2
 448:	01 97       	sbiw	r24, 0x01	; 1
 44a:	f1 f7       	brne	.-4      	; 0x448 <pulse_motor+0xcc>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 44c:	61 50       	subi	r22, 0x01	; 1
 44e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 450:	61 15       	cp	r22, r1
 452:	71 05       	cpc	r23, r1
 454:	c1 f7       	brne	.-16     	; 0x446 <pulse_motor+0xca>
 456:	09 c0       	rjmp	.+18     	; 0x46a <pulse_motor+0xee>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 458:	c7 01       	movw	r24, r14
 45a:	b6 01       	movw	r22, r12
 45c:	c3 d1       	rcall	.+902    	; 0x7e4 <__fixunssfsi>
 45e:	02 c0       	rjmp	.+4      	; 0x464 <pulse_motor+0xe8>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 460:	61 2f       	mov	r22, r17
 462:	70 2f       	mov	r23, r16
 464:	cb 01       	movw	r24, r22
 466:	01 97       	sbiw	r24, 0x01	; 1
 468:	f1 f7       	brne	.-4      	; 0x466 <pulse_motor+0xea>
		set_motor_off();
 46a:	83 df       	rcall	.-250    	; 0x372 <set_motor_off>
		_delay_ms(pulse_delay);
 46c:	69 85       	ldd	r22, Y+9	; 0x09
 46e:	7a 85       	ldd	r23, Y+10	; 0x0a
 470:	8b 85       	ldd	r24, Y+11	; 0x0b
 472:	9c 85       	ldd	r25, Y+12	; 0x0c
 474:	e3 d1       	rcall	.+966    	; 0x83c <__floatunsisf>
 476:	2b 01       	movw	r4, r22
 478:	3c 01       	movw	r6, r24

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 47a:	20 e0       	ldi	r18, 0x00	; 0
 47c:	30 e0       	ldi	r19, 0x00	; 0
 47e:	4a ef       	ldi	r20, 0xFA	; 250
 480:	54 e4       	ldi	r21, 0x44	; 68
 482:	6a d2       	rcall	.+1236   	; 0x958 <__mulsf3>
 484:	6b 01       	movw	r12, r22
 486:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	30 e0       	ldi	r19, 0x00	; 0
 48c:	40 e8       	ldi	r20, 0x80	; 128
 48e:	5f e3       	ldi	r21, 0x3F	; 63
 490:	a0 d1       	rcall	.+832    	; 0x7d2 <__cmpsf2>
 492:	88 23       	and	r24, r24
 494:	0c f1       	brlt	.+66     	; 0x4d8 <pulse_motor+0x15c>
		__ticks = 1;
	else if (__tmp > 65535)
 496:	20 e0       	ldi	r18, 0x00	; 0
 498:	3f ef       	ldi	r19, 0xFF	; 255
 49a:	4f e7       	ldi	r20, 0x7F	; 127
 49c:	57 e4       	ldi	r21, 0x47	; 71
 49e:	c7 01       	movw	r24, r14
 4a0:	b6 01       	movw	r22, r12
 4a2:	56 d2       	rcall	.+1196   	; 0x950 <__gesf2>
 4a4:	18 16       	cp	r1, r24
 4a6:	a4 f4       	brge	.+40     	; 0x4d0 <pulse_motor+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	40 e2       	ldi	r20, 0x20	; 32
 4ae:	51 e4       	ldi	r21, 0x41	; 65
 4b0:	c3 01       	movw	r24, r6
 4b2:	b2 01       	movw	r22, r4
 4b4:	51 d2       	rcall	.+1186   	; 0x958 <__mulsf3>
 4b6:	96 d1       	rcall	.+812    	; 0x7e4 <__fixunssfsi>
		while(__ticks)
 4b8:	61 15       	cp	r22, r1
 4ba:	71 05       	cpc	r23, r1
 4bc:	91 f0       	breq	.+36     	; 0x4e2 <pulse_motor+0x166>
 4be:	c1 01       	movw	r24, r2
 4c0:	01 97       	sbiw	r24, 0x01	; 1
 4c2:	f1 f7       	brne	.-4      	; 0x4c0 <pulse_motor+0x144>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4c4:	61 50       	subi	r22, 0x01	; 1
 4c6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4c8:	61 15       	cp	r22, r1
 4ca:	71 05       	cpc	r23, r1
 4cc:	c1 f7       	brne	.-16     	; 0x4be <pulse_motor+0x142>
 4ce:	09 c0       	rjmp	.+18     	; 0x4e2 <pulse_motor+0x166>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4d0:	c7 01       	movw	r24, r14
 4d2:	b6 01       	movw	r22, r12
 4d4:	87 d1       	rcall	.+782    	; 0x7e4 <__fixunssfsi>
 4d6:	02 c0       	rjmp	.+4      	; 0x4dc <pulse_motor+0x160>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4d8:	61 2f       	mov	r22, r17
 4da:	70 2f       	mov	r23, r16
 4dc:	cb 01       	movw	r24, r22
 4de:	01 97       	sbiw	r24, 0x01	; 1
 4e0:	f1 f7       	brne	.-4      	; 0x4de <pulse_motor+0x162>
}

void pulse_motor( uint32_t number_pulses, uint32_t pulse_length, uint32_t pulse_delay )
{
	set_motor_speed(MAX_SPEED);
	for ( uint32_t i = 0; i < number_pulses; i++ )
 4e2:	9f ef       	ldi	r25, 0xFF	; 255
 4e4:	89 1a       	sub	r8, r25
 4e6:	99 0a       	sbc	r9, r25
 4e8:	a9 0a       	sbc	r10, r25
 4ea:	b9 0a       	sbc	r11, r25
 4ec:	89 81       	ldd	r24, Y+1	; 0x01
 4ee:	9a 81       	ldd	r25, Y+2	; 0x02
 4f0:	ab 81       	ldd	r26, Y+3	; 0x03
 4f2:	bc 81       	ldd	r27, Y+4	; 0x04
 4f4:	88 16       	cp	r8, r24
 4f6:	99 06       	cpc	r9, r25
 4f8:	aa 06       	cpc	r10, r26
 4fa:	bb 06       	cpc	r11, r27
 4fc:	09 f0       	breq	.+2      	; 0x500 <pulse_motor+0x184>
 4fe:	78 cf       	rjmp	.-272    	; 0x3f0 <pulse_motor+0x74>
		_delay_ms(pulse_length);
		set_motor_off();
		_delay_ms(pulse_delay);
	}
	
}
 500:	2c 96       	adiw	r28, 0x0c	; 12
 502:	0f b6       	in	r0, 0x3f	; 63
 504:	f8 94       	cli
 506:	de bf       	out	0x3e, r29	; 62
 508:	0f be       	out	0x3f, r0	; 63
 50a:	cd bf       	out	0x3d, r28	; 61
 50c:	df 91       	pop	r29
 50e:	cf 91       	pop	r28
 510:	1f 91       	pop	r17
 512:	0f 91       	pop	r16
 514:	ff 90       	pop	r15
 516:	ef 90       	pop	r14
 518:	df 90       	pop	r13
 51a:	cf 90       	pop	r12
 51c:	bf 90       	pop	r11
 51e:	af 90       	pop	r10
 520:	9f 90       	pop	r9
 522:	8f 90       	pop	r8
 524:	7f 90       	pop	r7
 526:	6f 90       	pop	r6
 528:	5f 90       	pop	r5
 52a:	4f 90       	pop	r4
 52c:	3f 90       	pop	r3
 52e:	2f 90       	pop	r2
 530:	08 95       	ret

00000532 <main_state_machine>:
		}
	}
}

void main_state_machine( llmod_state* llmod_handle )
{
 532:	ef 92       	push	r14
 534:	ff 92       	push	r15
 536:	0f 93       	push	r16
 538:	1f 93       	push	r17
 53a:	cf 93       	push	r28
 53c:	df 93       	push	r29
 53e:	ec 01       	movw	r28, r24
	//Pulse the motor to indicate state change
	if ( llmod_handle->current_mode != llmod_handle->last_mode )
 540:	68 81       	ld	r22, Y
 542:	8b 81       	ldd	r24, Y+3	; 0x03
 544:	68 17       	cp	r22, r24
 546:	71 f0       	breq	.+28     	; 0x564 <main_state_machine+0x32>
		pulse_motor( llmod_handle->current_mode, 500, 500 );
 548:	70 e0       	ldi	r23, 0x00	; 0
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e0       	ldi	r25, 0x00	; 0
 54e:	14 ef       	ldi	r17, 0xF4	; 244
 550:	e1 2e       	mov	r14, r17
 552:	ff 24       	eor	r15, r15
 554:	f3 94       	inc	r15
 556:	00 e0       	ldi	r16, 0x00	; 0
 558:	10 e0       	ldi	r17, 0x00	; 0
 55a:	24 ef       	ldi	r18, 0xF4	; 244
 55c:	31 e0       	ldi	r19, 0x01	; 1
 55e:	40 e0       	ldi	r20, 0x00	; 0
 560:	50 e0       	ldi	r21, 0x00	; 0
 562:	0c df       	rcall	.-488    	; 0x37c <pulse_motor>
	
	switch ( llmod_handle->current_mode )
 564:	88 81       	ld	r24, Y
 566:	83 30       	cpi	r24, 0x03	; 3
 568:	b1 f0       	breq	.+44     	; 0x596 <main_state_machine+0x64>
 56a:	28 f4       	brcc	.+10     	; 0x576 <main_state_machine+0x44>
 56c:	81 30       	cpi	r24, 0x01	; 1
 56e:	51 f0       	breq	.+20     	; 0x584 <main_state_machine+0x52>
 570:	82 30       	cpi	r24, 0x02	; 2
 572:	69 f0       	breq	.+26     	; 0x58e <main_state_machine+0x5c>
 574:	05 c0       	rjmp	.+10     	; 0x580 <main_state_machine+0x4e>
 576:	85 30       	cpi	r24, 0x05	; 5
 578:	a9 f0       	breq	.+42     	; 0x5a4 <main_state_machine+0x72>
 57a:	90 f0       	brcs	.+36     	; 0x5a0 <main_state_machine+0x6e>
 57c:	86 30       	cpi	r24, 0x06	; 6
 57e:	a1 f0       	breq	.+40     	; 0x5a8 <main_state_machine+0x76>
	{
		default:
		case MODE_IDLE:
			//In idle mode the motor is off:
			set_motor_off();
 580:	f8 de       	rcall	.-528    	; 0x372 <set_motor_off>
		break;
 582:	13 c0       	rjmp	.+38     	; 0x5aa <main_state_machine+0x78>
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 584:	84 e6       	ldi	r24, 0x64	; 100
 586:	89 bd       	out	0x29, r24	; 41
		break;
		
		case MODE_NORMAL_FWD:
		//TODO: FIX DIRECTION WITH NEW MOTOR DRIVER!
			set_motor_speed(NORMAL_SPEED);
			set_motor_direction(BACKWARD);
 588:	81 e0       	ldi	r24, 0x01	; 1
 58a:	e8 de       	rcall	.-560    	; 0x35c <set_motor_direction>
		break;
 58c:	0e c0       	rjmp	.+28     	; 0x5aa <main_state_machine+0x78>
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 58e:	19 bc       	out	0x29, r1	; 41
			set_motor_direction(BACKWARD);
		break;
		
		case MODE_MAX_FWD:
			set_motor_speed(MAX_SPEED);
			set_motor_direction(BACKWARD);
 590:	81 e0       	ldi	r24, 0x01	; 1
 592:	e4 de       	rcall	.-568    	; 0x35c <set_motor_direction>
		break;
 594:	0a c0       	rjmp	.+20     	; 0x5aa <main_state_machine+0x78>
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 596:	84 e6       	ldi	r24, 0x64	; 100
 598:	89 bd       	out	0x29, r24	; 41
			set_motor_direction(BACKWARD);
		break;
		
		case MODE_NORMAL_REV:
			set_motor_speed(NORMAL_SPEED);
			set_motor_direction(BACKWARD);
 59a:	81 e0       	ldi	r24, 0x01	; 1
 59c:	df de       	rcall	.-578    	; 0x35c <set_motor_direction>
		break;
 59e:	05 c0       	rjmp	.+10     	; 0x5aa <main_state_machine+0x78>
		
		//TODO: Add random modes!
		case MODE_RND_FWD:
			set_motor_off();
 5a0:	e8 de       	rcall	.-560    	; 0x372 <set_motor_off>
		break;
 5a2:	03 c0       	rjmp	.+6      	; 0x5aa <main_state_machine+0x78>
		
		case MODE_RND_SNG_FWD:
			set_motor_off();
 5a4:	e6 de       	rcall	.-564    	; 0x372 <set_motor_off>
		break;
 5a6:	01 c0       	rjmp	.+2      	; 0x5aa <main_state_machine+0x78>
		
		case MODE_RND_SNG_FWD_REV:
			set_motor_off();
 5a8:	e4 de       	rcall	.-568    	; 0x372 <set_motor_off>
		break;
	}
	llmod_handle->last_mode = llmod_handle->current_mode;
 5aa:	88 81       	ld	r24, Y
 5ac:	8b 83       	std	Y+3, r24	; 0x03
}
 5ae:	df 91       	pop	r29
 5b0:	cf 91       	pop	r28
 5b2:	1f 91       	pop	r17
 5b4:	0f 91       	pop	r16
 5b6:	ff 90       	pop	r15
 5b8:	ef 90       	pop	r14
 5ba:	08 95       	ret

000005bc <main>:
void pulse_motor( uint32_t number_pulses, uint32_t pulse_length, uint32_t pulse_delay );

int main(void)
{
	//Disable global Interrupts
	cli();
 5bc:	f8 94       	cli
	
	//Set clock prescaler to 1 (8MHz)
	CLKPR = 1<<CLKPCE;
 5be:	80 e8       	ldi	r24, 0x80	; 128
 5c0:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
 5c2:	16 bc       	out	0x26, r1	; 38
	
	//Enable PLL, wait for it to achieve lock and then enable the clock for Timer/Counter 1:
	PLLCSR = (1 << PLLE);
 5c4:	82 e0       	ldi	r24, 0x02	; 2
 5c6:	87 bd       	out	0x27, r24	; 39
	while ( (PLLCSR & (1<<PLOCK)) == 0 );
 5c8:	07 b4       	in	r0, 0x27	; 39
 5ca:	00 fe       	sbrs	r0, 0
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <main+0xc>
	PLLCSR |= (1 << PCKE);
 5ce:	87 b5       	in	r24, 0x27	; 39
 5d0:	84 60       	ori	r24, 0x04	; 4
 5d2:	87 bd       	out	0x27, r24	; 39

	//Configure Ports PB0, PB3 and PB4 as output for motor control:
	DDRB |= (1<<DDB0) | (1<<DDB3) | (1<<DDB4);
 5d4:	87 b3       	in	r24, 0x17	; 23
 5d6:	89 61       	ori	r24, 0x19	; 25
 5d8:	87 bb       	out	0x17, r24	; 23
	
	//1ms CTC interrupt:
	TCCR1 = (1<<CTC1)|(5<<CS10);   // CTC  mode
 5da:	85 e8       	ldi	r24, 0x85	; 133
 5dc:	80 bf       	out	0x30, r24	; 48
	OCR1C = 39;  // 10µs
 5de:	87 e2       	ldi	r24, 0x27	; 39
 5e0:	8d bd       	out	0x2d, r24	; 45
	TIMSK |= (1<<OCIE1A);
 5e2:	89 b7       	in	r24, 0x39	; 57
 5e4:	80 64       	ori	r24, 0x40	; 64
 5e6:	89 bf       	out	0x39, r24	; 57
	
	sei();
 5e8:	78 94       	sei
	
	//PWM for speed setting:
	TCCR0A = 3<<COM0A0 | 3<<WGM00;
 5ea:	83 ec       	ldi	r24, 0xC3	; 195
 5ec:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = 0<<WGM02 | 2<<CS00;
 5ee:	82 e0       	ldi	r24, 0x02	; 2
 5f0:	83 bf       	out	0x33, r24	; 51
	llmod_handle->last_mode = llmod_handle->current_mode;
}

void init_llmod( llmod_state* llmod_handle )
{
	llmod_handle->current_mode = START_MODE;
 5f2:	e0 e0       	ldi	r30, 0x00	; 0
 5f4:	f0 e0       	ldi	r31, 0x00	; 0
 5f6:	10 82       	st	Z, r1
	llmod_handle->current_direction = 0;
 5f8:	11 82       	std	Z+1, r1	; 0x01
	llmod_handle->current_speed = 0;
 5fa:	12 82       	std	Z+2, r1	; 0x02
	//PWM for speed setting:
	TCCR0A = 3<<COM0A0 | 3<<WGM00;
	TCCR0B = 0<<WGM02 | 2<<CS00;
	
	init_llmod(START_MODE);
	main_state_machine( &llmod );
 5fc:	82 e9       	ldi	r24, 0x92	; 146
 5fe:	90 e0       	ldi	r25, 0x00	; 0
 600:	98 df       	rcall	.-208    	; 0x532 <main_state_machine>
	
	init_capsense( &capsense );
 602:	88 e7       	ldi	r24, 0x78	; 120
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	27 dd       	rcall	.-1458   	; 0x56 <init_capsense>

				// only toggle the MODE if the new button state is HIGH
				if (buttonState == HIGH)
				{
					
					llmod.current_mode++;
 608:	02 e9       	ldi	r16, 0x92	; 146
 60a:	10 e0       	ldi	r17, 0x00	; 0
					if ( llmod.current_mode >= MAX_MODES )
						llmod.current_mode = 0;
				}
			}
		}
		lastButtonState = button_reading;
 60c:	ce e8       	ldi	r28, 0x8E	; 142
 60e:	d0 e0       	ldi	r29, 0x00	; 0
		{
			button_reading = HIGH;
		}
		else
		{
			button_reading = LOW;
 610:	c1 2c       	mov	r12, r1
 612:	d1 2c       	mov	r13, r1
 614:	76 01       	movw	r14, r12
 616:	c3 94       	inc	r12
	int32_t capreading = 0;
	uint32_t capreference = 5;
	
    while(1)
    {
		capreading = capacitiveSensor( &capsense, 30 );
 618:	6e e1       	ldi	r22, 0x1E	; 30
 61a:	88 e7       	ldi	r24, 0x78	; 120
 61c:	90 e0       	ldi	r25, 0x00	; 0
 61e:	1e de       	rcall	.-964    	; 0x25c <capacitiveSensor>
		
		if ( capreading >= capreference )
 620:	65 30       	cpi	r22, 0x05	; 5
 622:	71 05       	cpc	r23, r1
 624:	81 05       	cpc	r24, r1
 626:	91 05       	cpc	r25, r1
 628:	48 f0       	brcs	.+18     	; 0x63c <main+0x80>
		{
			button_reading = HIGH;
 62a:	10 92 8e 00 	sts	0x008E, r1
 62e:	10 92 8f 00 	sts	0x008F, r1
 632:	10 92 90 00 	sts	0x0090, r1
 636:	10 92 91 00 	sts	0x0091, r1
 63a:	08 c0       	rjmp	.+16     	; 0x64c <main+0x90>
		}
		else
		{
			button_reading = LOW;
 63c:	c0 92 8e 00 	sts	0x008E, r12
 640:	d0 92 8f 00 	sts	0x008F, r13
 644:	e0 92 90 00 	sts	0x0090, r14
 648:	f0 92 91 00 	sts	0x0091, r15
	}
}

uint32_t millis()
{
	return milliseconds;
 64c:	40 91 74 00 	lds	r20, 0x0074
 650:	50 91 75 00 	lds	r21, 0x0075
 654:	60 91 76 00 	lds	r22, 0x0076
 658:	70 91 77 00 	lds	r23, 0x0077
		else
		{
			button_reading = LOW;
		}
		
		if ((millis() - lastDebounceTime) > debounceDelay)
 65c:	80 91 6e 00 	lds	r24, 0x006E
 660:	90 91 6f 00 	lds	r25, 0x006F
 664:	a0 91 70 00 	lds	r26, 0x0070
 668:	b0 91 71 00 	lds	r27, 0x0071
 66c:	48 1b       	sub	r20, r24
 66e:	59 0b       	sbc	r21, r25
 670:	6a 0b       	sbc	r22, r26
 672:	7b 0b       	sbc	r23, r27
 674:	80 91 64 00 	lds	r24, 0x0064
 678:	90 91 65 00 	lds	r25, 0x0065
 67c:	a0 91 66 00 	lds	r26, 0x0066
 680:	b0 91 67 00 	lds	r27, 0x0067
 684:	84 17       	cp	r24, r20
 686:	95 07       	cpc	r25, r21
 688:	a6 07       	cpc	r26, r22
 68a:	b7 07       	cpc	r27, r23
 68c:	08 f5       	brcc	.+66     	; 0x6d0 <main+0x114>
		{
			// whatever the reading is at, it's been there for longer
			// than the debounce delay, so take it as the actual current state:

			// if the button state has changed:
			if (button_reading != buttonState)
 68e:	40 91 8d 00 	lds	r20, 0x008D
 692:	80 91 8e 00 	lds	r24, 0x008E
 696:	90 91 8f 00 	lds	r25, 0x008F
 69a:	a0 91 90 00 	lds	r26, 0x0090
 69e:	b0 91 91 00 	lds	r27, 0x0091
 6a2:	50 e0       	ldi	r21, 0x00	; 0
 6a4:	60 e0       	ldi	r22, 0x00	; 0
 6a6:	70 e0       	ldi	r23, 0x00	; 0
 6a8:	48 17       	cp	r20, r24
 6aa:	59 07       	cpc	r21, r25
 6ac:	6a 07       	cpc	r22, r26
 6ae:	7b 07       	cpc	r23, r27
 6b0:	79 f0       	breq	.+30     	; 0x6d0 <main+0x114>
			{
				buttonState = button_reading;
 6b2:	80 93 8d 00 	sts	0x008D, r24

				// only toggle the MODE if the new button state is HIGH
				if (buttonState == HIGH)
 6b6:	80 91 8d 00 	lds	r24, 0x008D
 6ba:	81 11       	cpse	r24, r1
 6bc:	09 c0       	rjmp	.+18     	; 0x6d0 <main+0x114>
				{
					
					llmod.current_mode++;
 6be:	f8 01       	movw	r30, r16
 6c0:	80 81       	ld	r24, Z
 6c2:	8f 5f       	subi	r24, 0xFF	; 255
					if ( llmod.current_mode >= MAX_MODES )
 6c4:	86 30       	cpi	r24, 0x06	; 6
 6c6:	10 f4       	brcc	.+4      	; 0x6cc <main+0x110>

				// only toggle the MODE if the new button state is HIGH
				if (buttonState == HIGH)
				{
					
					llmod.current_mode++;
 6c8:	80 83       	st	Z, r24
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <main+0x114>
					if ( llmod.current_mode >= MAX_MODES )
						llmod.current_mode = 0;
 6cc:	f8 01       	movw	r30, r16
 6ce:	10 82       	st	Z, r1
				}
			}
		}
		lastButtonState = button_reading;
 6d0:	88 81       	ld	r24, Y
 6d2:	80 93 68 00 	sts	0x0068, r24
	}
}

uint32_t millis()
{
	return milliseconds;
 6d6:	80 91 74 00 	lds	r24, 0x0074
 6da:	90 91 75 00 	lds	r25, 0x0075
 6de:	a0 91 76 00 	lds	r26, 0x0076
 6e2:	b0 91 77 00 	lds	r27, 0x0077
				}
			}
		}
		lastButtonState = button_reading;
		
		if ((millis() - lastModeSwitchTime) > modeSwitchDelay)
 6e6:	40 91 6a 00 	lds	r20, 0x006A
 6ea:	50 91 6b 00 	lds	r21, 0x006B
 6ee:	60 91 6c 00 	lds	r22, 0x006C
 6f2:	70 91 6d 00 	lds	r23, 0x006D
 6f6:	84 1b       	sub	r24, r20
 6f8:	95 0b       	sbc	r25, r21
 6fa:	a6 0b       	sbc	r26, r22
 6fc:	b7 0b       	sbc	r27, r23
 6fe:	40 91 60 00 	lds	r20, 0x0060
 702:	50 91 61 00 	lds	r21, 0x0061
 706:	60 91 62 00 	lds	r22, 0x0062
 70a:	70 91 63 00 	lds	r23, 0x0063
 70e:	48 17       	cp	r20, r24
 710:	59 07       	cpc	r21, r25
 712:	6a 07       	cpc	r22, r26
 714:	7b 07       	cpc	r23, r27
 716:	08 f0       	brcs	.+2      	; 0x71a <main+0x15e>
 718:	7f cf       	rjmp	.-258    	; 0x618 <main+0x5c>
	}
}

uint32_t millis()
{
	return milliseconds;
 71a:	80 91 74 00 	lds	r24, 0x0074
 71e:	90 91 75 00 	lds	r25, 0x0075
 722:	a0 91 76 00 	lds	r26, 0x0076
 726:	b0 91 77 00 	lds	r27, 0x0077
		}
		lastButtonState = button_reading;
		
		if ((millis() - lastModeSwitchTime) > modeSwitchDelay)
		{
			lastModeSwitchTime = millis();
 72a:	80 93 6a 00 	sts	0x006A, r24
 72e:	90 93 6b 00 	sts	0x006B, r25
 732:	a0 93 6c 00 	sts	0x006C, r26
 736:	b0 93 6d 00 	sts	0x006D, r27
			main_state_machine( &llmod );
 73a:	c8 01       	movw	r24, r16
 73c:	fa de       	rcall	.-524    	; 0x532 <main_state_machine>
 73e:	6c cf       	rjmp	.-296    	; 0x618 <main+0x5c>

00000740 <__vector_3>:
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
}

ISR(TIMER1_COMPA_vect)
{
 740:	1f 92       	push	r1
 742:	0f 92       	push	r0
 744:	0f b6       	in	r0, 0x3f	; 63
 746:	0f 92       	push	r0
 748:	11 24       	eor	r1, r1
 74a:	2f 93       	push	r18
 74c:	8f 93       	push	r24
 74e:	9f 93       	push	r25
 750:	af 93       	push	r26
 752:	bf 93       	push	r27
	microseconds += 10;
 754:	80 91 72 00 	lds	r24, 0x0072
 758:	90 91 73 00 	lds	r25, 0x0073
 75c:	0a 96       	adiw	r24, 0x0a	; 10
 75e:	90 93 73 00 	sts	0x0073, r25
 762:	80 93 72 00 	sts	0x0072, r24
	if ( microseconds == 1000 )
 766:	80 91 72 00 	lds	r24, 0x0072
 76a:	90 91 73 00 	lds	r25, 0x0073
 76e:	88 3e       	cpi	r24, 0xE8	; 232
 770:	93 40       	sbci	r25, 0x03	; 3
 772:	b9 f4       	brne	.+46     	; 0x7a2 <__vector_3+0x62>
	{
		microseconds = 0;
 774:	10 92 73 00 	sts	0x0073, r1
 778:	10 92 72 00 	sts	0x0072, r1
		milliseconds++;
 77c:	80 91 74 00 	lds	r24, 0x0074
 780:	90 91 75 00 	lds	r25, 0x0075
 784:	a0 91 76 00 	lds	r26, 0x0076
 788:	b0 91 77 00 	lds	r27, 0x0077
 78c:	01 96       	adiw	r24, 0x01	; 1
 78e:	a1 1d       	adc	r26, r1
 790:	b1 1d       	adc	r27, r1
 792:	80 93 74 00 	sts	0x0074, r24
 796:	90 93 75 00 	sts	0x0075, r25
 79a:	a0 93 76 00 	sts	0x0076, r26
 79e:	b0 93 77 00 	sts	0x0077, r27
	}
}
 7a2:	bf 91       	pop	r27
 7a4:	af 91       	pop	r26
 7a6:	9f 91       	pop	r25
 7a8:	8f 91       	pop	r24
 7aa:	2f 91       	pop	r18
 7ac:	0f 90       	pop	r0
 7ae:	0f be       	out	0x3f, r0	; 63
 7b0:	0f 90       	pop	r0
 7b2:	1f 90       	pop	r1
 7b4:	18 95       	reti

000007b6 <millis>:

uint32_t millis()
{
	return milliseconds;
 7b6:	60 91 74 00 	lds	r22, 0x0074
 7ba:	70 91 75 00 	lds	r23, 0x0075
 7be:	80 91 76 00 	lds	r24, 0x0076
 7c2:	90 91 77 00 	lds	r25, 0x0077
}
 7c6:	08 95       	ret

000007c8 <micros>:

uint16_t micros()
{
	return microseconds;
 7c8:	80 91 72 00 	lds	r24, 0x0072
 7cc:	90 91 73 00 	lds	r25, 0x0073
}
 7d0:	08 95       	ret

000007d2 <__cmpsf2>:
 7d2:	71 d0       	rcall	.+226    	; 0x8b6 <__fp_cmp>
 7d4:	08 f4       	brcc	.+2      	; 0x7d8 <__cmpsf2+0x6>
 7d6:	81 e0       	ldi	r24, 0x01	; 1
 7d8:	08 95       	ret

000007da <__fixsfsi>:
 7da:	04 d0       	rcall	.+8      	; 0x7e4 <__fixunssfsi>
 7dc:	68 94       	set
 7de:	b1 11       	cpse	r27, r1
 7e0:	b1 c0       	rjmp	.+354    	; 0x944 <__fp_szero>
 7e2:	08 95       	ret

000007e4 <__fixunssfsi>:
 7e4:	94 d0       	rcall	.+296    	; 0x90e <__fp_splitA>
 7e6:	88 f0       	brcs	.+34     	; 0x80a <__fixunssfsi+0x26>
 7e8:	9f 57       	subi	r25, 0x7F	; 127
 7ea:	90 f0       	brcs	.+36     	; 0x810 <__fixunssfsi+0x2c>
 7ec:	b9 2f       	mov	r27, r25
 7ee:	99 27       	eor	r25, r25
 7f0:	b7 51       	subi	r27, 0x17	; 23
 7f2:	a0 f0       	brcs	.+40     	; 0x81c <__fixunssfsi+0x38>
 7f4:	d1 f0       	breq	.+52     	; 0x82a <__fixunssfsi+0x46>
 7f6:	66 0f       	add	r22, r22
 7f8:	77 1f       	adc	r23, r23
 7fa:	88 1f       	adc	r24, r24
 7fc:	99 1f       	adc	r25, r25
 7fe:	1a f0       	brmi	.+6      	; 0x806 <__fixunssfsi+0x22>
 800:	ba 95       	dec	r27
 802:	c9 f7       	brne	.-14     	; 0x7f6 <__fixunssfsi+0x12>
 804:	12 c0       	rjmp	.+36     	; 0x82a <__fixunssfsi+0x46>
 806:	b1 30       	cpi	r27, 0x01	; 1
 808:	81 f0       	breq	.+32     	; 0x82a <__fixunssfsi+0x46>
 80a:	9b d0       	rcall	.+310    	; 0x942 <__fp_zero>
 80c:	b1 e0       	ldi	r27, 0x01	; 1
 80e:	08 95       	ret
 810:	98 c0       	rjmp	.+304    	; 0x942 <__fp_zero>
 812:	67 2f       	mov	r22, r23
 814:	78 2f       	mov	r23, r24
 816:	88 27       	eor	r24, r24
 818:	b8 5f       	subi	r27, 0xF8	; 248
 81a:	39 f0       	breq	.+14     	; 0x82a <__fixunssfsi+0x46>
 81c:	b9 3f       	cpi	r27, 0xF9	; 249
 81e:	cc f3       	brlt	.-14     	; 0x812 <__fixunssfsi+0x2e>
 820:	86 95       	lsr	r24
 822:	77 95       	ror	r23
 824:	67 95       	ror	r22
 826:	b3 95       	inc	r27
 828:	d9 f7       	brne	.-10     	; 0x820 <__fixunssfsi+0x3c>
 82a:	3e f4       	brtc	.+14     	; 0x83a <__fixunssfsi+0x56>
 82c:	90 95       	com	r25
 82e:	80 95       	com	r24
 830:	70 95       	com	r23
 832:	61 95       	neg	r22
 834:	7f 4f       	sbci	r23, 0xFF	; 255
 836:	8f 4f       	sbci	r24, 0xFF	; 255
 838:	9f 4f       	sbci	r25, 0xFF	; 255
 83a:	08 95       	ret

0000083c <__floatunsisf>:
 83c:	e8 94       	clt
 83e:	09 c0       	rjmp	.+18     	; 0x852 <__floatsisf+0x12>

00000840 <__floatsisf>:
 840:	97 fb       	bst	r25, 7
 842:	3e f4       	brtc	.+14     	; 0x852 <__floatsisf+0x12>
 844:	90 95       	com	r25
 846:	80 95       	com	r24
 848:	70 95       	com	r23
 84a:	61 95       	neg	r22
 84c:	7f 4f       	sbci	r23, 0xFF	; 255
 84e:	8f 4f       	sbci	r24, 0xFF	; 255
 850:	9f 4f       	sbci	r25, 0xFF	; 255
 852:	99 23       	and	r25, r25
 854:	a9 f0       	breq	.+42     	; 0x880 <__floatsisf+0x40>
 856:	f9 2f       	mov	r31, r25
 858:	96 e9       	ldi	r25, 0x96	; 150
 85a:	bb 27       	eor	r27, r27
 85c:	93 95       	inc	r25
 85e:	f6 95       	lsr	r31
 860:	87 95       	ror	r24
 862:	77 95       	ror	r23
 864:	67 95       	ror	r22
 866:	b7 95       	ror	r27
 868:	f1 11       	cpse	r31, r1
 86a:	f8 cf       	rjmp	.-16     	; 0x85c <__floatsisf+0x1c>
 86c:	fa f4       	brpl	.+62     	; 0x8ac <__floatsisf+0x6c>
 86e:	bb 0f       	add	r27, r27
 870:	11 f4       	brne	.+4      	; 0x876 <__floatsisf+0x36>
 872:	60 ff       	sbrs	r22, 0
 874:	1b c0       	rjmp	.+54     	; 0x8ac <__floatsisf+0x6c>
 876:	6f 5f       	subi	r22, 0xFF	; 255
 878:	7f 4f       	sbci	r23, 0xFF	; 255
 87a:	8f 4f       	sbci	r24, 0xFF	; 255
 87c:	9f 4f       	sbci	r25, 0xFF	; 255
 87e:	16 c0       	rjmp	.+44     	; 0x8ac <__floatsisf+0x6c>
 880:	88 23       	and	r24, r24
 882:	11 f0       	breq	.+4      	; 0x888 <__floatsisf+0x48>
 884:	96 e9       	ldi	r25, 0x96	; 150
 886:	11 c0       	rjmp	.+34     	; 0x8aa <__floatsisf+0x6a>
 888:	77 23       	and	r23, r23
 88a:	21 f0       	breq	.+8      	; 0x894 <__floatsisf+0x54>
 88c:	9e e8       	ldi	r25, 0x8E	; 142
 88e:	87 2f       	mov	r24, r23
 890:	76 2f       	mov	r23, r22
 892:	05 c0       	rjmp	.+10     	; 0x89e <__floatsisf+0x5e>
 894:	66 23       	and	r22, r22
 896:	71 f0       	breq	.+28     	; 0x8b4 <__floatsisf+0x74>
 898:	96 e8       	ldi	r25, 0x86	; 134
 89a:	86 2f       	mov	r24, r22
 89c:	70 e0       	ldi	r23, 0x00	; 0
 89e:	60 e0       	ldi	r22, 0x00	; 0
 8a0:	2a f0       	brmi	.+10     	; 0x8ac <__floatsisf+0x6c>
 8a2:	9a 95       	dec	r25
 8a4:	66 0f       	add	r22, r22
 8a6:	77 1f       	adc	r23, r23
 8a8:	88 1f       	adc	r24, r24
 8aa:	da f7       	brpl	.-10     	; 0x8a2 <__floatsisf+0x62>
 8ac:	88 0f       	add	r24, r24
 8ae:	96 95       	lsr	r25
 8b0:	87 95       	ror	r24
 8b2:	97 f9       	bld	r25, 7
 8b4:	08 95       	ret

000008b6 <__fp_cmp>:
 8b6:	99 0f       	add	r25, r25
 8b8:	00 08       	sbc	r0, r0
 8ba:	55 0f       	add	r21, r21
 8bc:	aa 0b       	sbc	r26, r26
 8be:	e0 e8       	ldi	r30, 0x80	; 128
 8c0:	fe ef       	ldi	r31, 0xFE	; 254
 8c2:	16 16       	cp	r1, r22
 8c4:	17 06       	cpc	r1, r23
 8c6:	e8 07       	cpc	r30, r24
 8c8:	f9 07       	cpc	r31, r25
 8ca:	c0 f0       	brcs	.+48     	; 0x8fc <__fp_cmp+0x46>
 8cc:	12 16       	cp	r1, r18
 8ce:	13 06       	cpc	r1, r19
 8d0:	e4 07       	cpc	r30, r20
 8d2:	f5 07       	cpc	r31, r21
 8d4:	98 f0       	brcs	.+38     	; 0x8fc <__fp_cmp+0x46>
 8d6:	62 1b       	sub	r22, r18
 8d8:	73 0b       	sbc	r23, r19
 8da:	84 0b       	sbc	r24, r20
 8dc:	95 0b       	sbc	r25, r21
 8de:	39 f4       	brne	.+14     	; 0x8ee <__fp_cmp+0x38>
 8e0:	0a 26       	eor	r0, r26
 8e2:	61 f0       	breq	.+24     	; 0x8fc <__fp_cmp+0x46>
 8e4:	23 2b       	or	r18, r19
 8e6:	24 2b       	or	r18, r20
 8e8:	25 2b       	or	r18, r21
 8ea:	21 f4       	brne	.+8      	; 0x8f4 <__fp_cmp+0x3e>
 8ec:	08 95       	ret
 8ee:	0a 26       	eor	r0, r26
 8f0:	09 f4       	brne	.+2      	; 0x8f4 <__fp_cmp+0x3e>
 8f2:	a1 40       	sbci	r26, 0x01	; 1
 8f4:	a6 95       	lsr	r26
 8f6:	8f ef       	ldi	r24, 0xFF	; 255
 8f8:	81 1d       	adc	r24, r1
 8fa:	81 1d       	adc	r24, r1
 8fc:	08 95       	ret

000008fe <__fp_split3>:
 8fe:	57 fd       	sbrc	r21, 7
 900:	90 58       	subi	r25, 0x80	; 128
 902:	44 0f       	add	r20, r20
 904:	55 1f       	adc	r21, r21
 906:	59 f0       	breq	.+22     	; 0x91e <__fp_splitA+0x10>
 908:	5f 3f       	cpi	r21, 0xFF	; 255
 90a:	71 f0       	breq	.+28     	; 0x928 <__fp_splitA+0x1a>
 90c:	47 95       	ror	r20

0000090e <__fp_splitA>:
 90e:	88 0f       	add	r24, r24
 910:	97 fb       	bst	r25, 7
 912:	99 1f       	adc	r25, r25
 914:	61 f0       	breq	.+24     	; 0x92e <__fp_splitA+0x20>
 916:	9f 3f       	cpi	r25, 0xFF	; 255
 918:	79 f0       	breq	.+30     	; 0x938 <__fp_splitA+0x2a>
 91a:	87 95       	ror	r24
 91c:	08 95       	ret
 91e:	12 16       	cp	r1, r18
 920:	13 06       	cpc	r1, r19
 922:	14 06       	cpc	r1, r20
 924:	55 1f       	adc	r21, r21
 926:	f2 cf       	rjmp	.-28     	; 0x90c <__fp_split3+0xe>
 928:	46 95       	lsr	r20
 92a:	f1 df       	rcall	.-30     	; 0x90e <__fp_splitA>
 92c:	08 c0       	rjmp	.+16     	; 0x93e <__fp_splitA+0x30>
 92e:	16 16       	cp	r1, r22
 930:	17 06       	cpc	r1, r23
 932:	18 06       	cpc	r1, r24
 934:	99 1f       	adc	r25, r25
 936:	f1 cf       	rjmp	.-30     	; 0x91a <__fp_splitA+0xc>
 938:	86 95       	lsr	r24
 93a:	71 05       	cpc	r23, r1
 93c:	61 05       	cpc	r22, r1
 93e:	08 94       	sec
 940:	08 95       	ret

00000942 <__fp_zero>:
 942:	e8 94       	clt

00000944 <__fp_szero>:
 944:	bb 27       	eor	r27, r27
 946:	66 27       	eor	r22, r22
 948:	77 27       	eor	r23, r23
 94a:	cb 01       	movw	r24, r22
 94c:	97 f9       	bld	r25, 7
 94e:	08 95       	ret

00000950 <__gesf2>:
 950:	b2 df       	rcall	.-156    	; 0x8b6 <__fp_cmp>
 952:	08 f4       	brcc	.+2      	; 0x956 <__gesf2+0x6>
 954:	8f ef       	ldi	r24, 0xFF	; 255
 956:	08 95       	ret

00000958 <__mulsf3>:
 958:	0a d0       	rcall	.+20     	; 0x96e <__mulsf3x>
 95a:	80 c0       	rjmp	.+256    	; 0xa5c <__fp_round>
 95c:	71 d0       	rcall	.+226    	; 0xa40 <__fp_pscA>
 95e:	28 f0       	brcs	.+10     	; 0x96a <__mulsf3+0x12>
 960:	76 d0       	rcall	.+236    	; 0xa4e <__fp_pscB>
 962:	18 f0       	brcs	.+6      	; 0x96a <__mulsf3+0x12>
 964:	95 23       	and	r25, r21
 966:	09 f0       	breq	.+2      	; 0x96a <__mulsf3+0x12>
 968:	62 c0       	rjmp	.+196    	; 0xa2e <__fp_inf>
 96a:	67 c0       	rjmp	.+206    	; 0xa3a <__fp_nan>
 96c:	eb cf       	rjmp	.-42     	; 0x944 <__fp_szero>

0000096e <__mulsf3x>:
 96e:	c7 df       	rcall	.-114    	; 0x8fe <__fp_split3>
 970:	a8 f3       	brcs	.-22     	; 0x95c <__mulsf3+0x4>

00000972 <__mulsf3_pse>:
 972:	99 23       	and	r25, r25
 974:	d9 f3       	breq	.-10     	; 0x96c <__mulsf3+0x14>
 976:	55 23       	and	r21, r21
 978:	c9 f3       	breq	.-14     	; 0x96c <__mulsf3+0x14>
 97a:	95 0f       	add	r25, r21
 97c:	50 e0       	ldi	r21, 0x00	; 0
 97e:	55 1f       	adc	r21, r21
 980:	aa 27       	eor	r26, r26
 982:	ee 27       	eor	r30, r30
 984:	ff 27       	eor	r31, r31
 986:	bb 27       	eor	r27, r27
 988:	00 24       	eor	r0, r0
 98a:	08 94       	sec
 98c:	67 95       	ror	r22
 98e:	20 f4       	brcc	.+8      	; 0x998 <__mulsf3_pse+0x26>
 990:	e2 0f       	add	r30, r18
 992:	f3 1f       	adc	r31, r19
 994:	b4 1f       	adc	r27, r20
 996:	0a 1e       	adc	r0, r26
 998:	22 0f       	add	r18, r18
 99a:	33 1f       	adc	r19, r19
 99c:	44 1f       	adc	r20, r20
 99e:	aa 1f       	adc	r26, r26
 9a0:	66 95       	lsr	r22
 9a2:	a9 f7       	brne	.-22     	; 0x98e <__mulsf3_pse+0x1c>
 9a4:	77 95       	ror	r23
 9a6:	30 f4       	brcc	.+12     	; 0x9b4 <__mulsf3_pse+0x42>
 9a8:	f3 0f       	add	r31, r19
 9aa:	b4 1f       	adc	r27, r20
 9ac:	0a 1e       	adc	r0, r26
 9ae:	12 1e       	adc	r1, r18
 9b0:	08 f4       	brcc	.+2      	; 0x9b4 <__mulsf3_pse+0x42>
 9b2:	63 95       	inc	r22
 9b4:	33 0f       	add	r19, r19
 9b6:	44 1f       	adc	r20, r20
 9b8:	aa 1f       	adc	r26, r26
 9ba:	22 1f       	adc	r18, r18
 9bc:	76 95       	lsr	r23
 9be:	99 f7       	brne	.-26     	; 0x9a6 <__mulsf3_pse+0x34>
 9c0:	87 95       	ror	r24
 9c2:	20 f4       	brcc	.+8      	; 0x9cc <__mulsf3_pse+0x5a>
 9c4:	b4 0f       	add	r27, r20
 9c6:	0a 1e       	adc	r0, r26
 9c8:	12 1e       	adc	r1, r18
 9ca:	63 1f       	adc	r22, r19
 9cc:	44 0f       	add	r20, r20
 9ce:	aa 1f       	adc	r26, r26
 9d0:	22 1f       	adc	r18, r18
 9d2:	33 1f       	adc	r19, r19
 9d4:	86 95       	lsr	r24
 9d6:	a9 f7       	brne	.-22     	; 0x9c2 <__mulsf3_pse+0x50>
 9d8:	86 2f       	mov	r24, r22
 9da:	71 2d       	mov	r23, r1
 9dc:	60 2d       	mov	r22, r0
 9de:	11 24       	eor	r1, r1
 9e0:	9f 57       	subi	r25, 0x7F	; 127
 9e2:	50 40       	sbci	r21, 0x00	; 0
 9e4:	8a f0       	brmi	.+34     	; 0xa08 <__mulsf3_pse+0x96>
 9e6:	e1 f0       	breq	.+56     	; 0xa20 <__mulsf3_pse+0xae>
 9e8:	88 23       	and	r24, r24
 9ea:	4a f0       	brmi	.+18     	; 0x9fe <__mulsf3_pse+0x8c>
 9ec:	ee 0f       	add	r30, r30
 9ee:	ff 1f       	adc	r31, r31
 9f0:	bb 1f       	adc	r27, r27
 9f2:	66 1f       	adc	r22, r22
 9f4:	77 1f       	adc	r23, r23
 9f6:	88 1f       	adc	r24, r24
 9f8:	91 50       	subi	r25, 0x01	; 1
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	a9 f7       	brne	.-22     	; 0x9e8 <__mulsf3_pse+0x76>
 9fe:	9e 3f       	cpi	r25, 0xFE	; 254
 a00:	51 05       	cpc	r21, r1
 a02:	70 f0       	brcs	.+28     	; 0xa20 <__mulsf3_pse+0xae>
 a04:	14 c0       	rjmp	.+40     	; 0xa2e <__fp_inf>
 a06:	9e cf       	rjmp	.-196    	; 0x944 <__fp_szero>
 a08:	5f 3f       	cpi	r21, 0xFF	; 255
 a0a:	ec f3       	brlt	.-6      	; 0xa06 <__mulsf3_pse+0x94>
 a0c:	98 3e       	cpi	r25, 0xE8	; 232
 a0e:	dc f3       	brlt	.-10     	; 0xa06 <__mulsf3_pse+0x94>
 a10:	86 95       	lsr	r24
 a12:	77 95       	ror	r23
 a14:	67 95       	ror	r22
 a16:	b7 95       	ror	r27
 a18:	f7 95       	ror	r31
 a1a:	e7 95       	ror	r30
 a1c:	9f 5f       	subi	r25, 0xFF	; 255
 a1e:	c1 f7       	brne	.-16     	; 0xa10 <__mulsf3_pse+0x9e>
 a20:	fe 2b       	or	r31, r30
 a22:	88 0f       	add	r24, r24
 a24:	91 1d       	adc	r25, r1
 a26:	96 95       	lsr	r25
 a28:	87 95       	ror	r24
 a2a:	97 f9       	bld	r25, 7
 a2c:	08 95       	ret

00000a2e <__fp_inf>:
 a2e:	97 f9       	bld	r25, 7
 a30:	9f 67       	ori	r25, 0x7F	; 127
 a32:	80 e8       	ldi	r24, 0x80	; 128
 a34:	70 e0       	ldi	r23, 0x00	; 0
 a36:	60 e0       	ldi	r22, 0x00	; 0
 a38:	08 95       	ret

00000a3a <__fp_nan>:
 a3a:	9f ef       	ldi	r25, 0xFF	; 255
 a3c:	80 ec       	ldi	r24, 0xC0	; 192
 a3e:	08 95       	ret

00000a40 <__fp_pscA>:
 a40:	00 24       	eor	r0, r0
 a42:	0a 94       	dec	r0
 a44:	16 16       	cp	r1, r22
 a46:	17 06       	cpc	r1, r23
 a48:	18 06       	cpc	r1, r24
 a4a:	09 06       	cpc	r0, r25
 a4c:	08 95       	ret

00000a4e <__fp_pscB>:
 a4e:	00 24       	eor	r0, r0
 a50:	0a 94       	dec	r0
 a52:	12 16       	cp	r1, r18
 a54:	13 06       	cpc	r1, r19
 a56:	14 06       	cpc	r1, r20
 a58:	05 06       	cpc	r0, r21
 a5a:	08 95       	ret

00000a5c <__fp_round>:
 a5c:	09 2e       	mov	r0, r25
 a5e:	03 94       	inc	r0
 a60:	00 0c       	add	r0, r0
 a62:	11 f4       	brne	.+4      	; 0xa68 <__fp_round+0xc>
 a64:	88 23       	and	r24, r24
 a66:	52 f0       	brmi	.+20     	; 0xa7c <__fp_round+0x20>
 a68:	bb 0f       	add	r27, r27
 a6a:	40 f4       	brcc	.+16     	; 0xa7c <__fp_round+0x20>
 a6c:	bf 2b       	or	r27, r31
 a6e:	11 f4       	brne	.+4      	; 0xa74 <__fp_round+0x18>
 a70:	60 ff       	sbrs	r22, 0
 a72:	04 c0       	rjmp	.+8      	; 0xa7c <__fp_round+0x20>
 a74:	6f 5f       	subi	r22, 0xFF	; 255
 a76:	7f 4f       	sbci	r23, 0xFF	; 255
 a78:	8f 4f       	sbci	r24, 0xFF	; 255
 a7a:	9f 4f       	sbci	r25, 0xFF	; 255
 a7c:	08 95       	ret

00000a7e <exit>:
 a7e:	f8 94       	cli
 a80:	00 c0       	rjmp	.+0      	; 0xa82 <_exit>

00000a82 <_exit>:
 a82:	f8 94       	cli

00000a84 <__stop_program>:
 a84:	ff cf       	rjmp	.-2      	; 0xa84 <__stop_program>
