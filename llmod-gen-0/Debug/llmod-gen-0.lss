
llmod-gen-0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001b0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000005b  00800060  00800060  00000224  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000224  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  00000290  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000132b  00000000  00000000  000003a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000757  00000000  00000000  000016d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006e1  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  0000250c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000638  00000000  00000000  0000285c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f09  00000000  00000000  00002e94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  00003d9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	1d c0       	rjmp	.+58     	; 0x3e <__bad_interrupt>
   4:	1c c0       	rjmp	.+56     	; 0x3e <__bad_interrupt>
   6:	95 c0       	rjmp	.+298    	; 0x132 <__vector_3>
   8:	1a c0       	rjmp	.+52     	; 0x3e <__bad_interrupt>
   a:	19 c0       	rjmp	.+50     	; 0x3e <__bad_interrupt>
   c:	18 c0       	rjmp	.+48     	; 0x3e <__bad_interrupt>
   e:	17 c0       	rjmp	.+46     	; 0x3e <__bad_interrupt>
  10:	16 c0       	rjmp	.+44     	; 0x3e <__bad_interrupt>
  12:	15 c0       	rjmp	.+42     	; 0x3e <__bad_interrupt>
  14:	14 c0       	rjmp	.+40     	; 0x3e <__bad_interrupt>
  16:	13 c0       	rjmp	.+38     	; 0x3e <__bad_interrupt>
  18:	12 c0       	rjmp	.+36     	; 0x3e <__bad_interrupt>
  1a:	11 c0       	rjmp	.+34     	; 0x3e <__bad_interrupt>
  1c:	10 c0       	rjmp	.+32     	; 0x3e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_clear_bss>:
  2a:	20 e0       	ldi	r18, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	01 c0       	rjmp	.+2      	; 0x34 <.do_clear_bss_start>

00000032 <.do_clear_bss_loop>:
  32:	1d 92       	st	X+, r1

00000034 <.do_clear_bss_start>:
  34:	ab 3b       	cpi	r26, 0xBB	; 187
  36:	b2 07       	cpc	r27, r18
  38:	e1 f7       	brne	.-8      	; 0x32 <.do_clear_bss_loop>
  3a:	41 d0       	rcall	.+130    	; 0xbe <main>
  3c:	b5 c0       	rjmp	.+362    	; 0x1a8 <exit>

0000003e <__bad_interrupt>:
  3e:	e0 cf       	rjmp	.-64     	; 0x0 <__vectors>

00000040 <init_capsense>:
	{
		if (SenseOneCycle(capsense_handle))
			i++;
	}
	
	capsense_handle->completed_cycles++;
  40:	fc 01       	movw	r30, r24
  42:	82 e3       	ldi	r24, 0x32	; 50
  44:	90 e0       	ldi	r25, 0x00	; 0
  46:	a0 e0       	ldi	r26, 0x00	; 0
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	86 87       	std	Z+14, r24	; 0x0e
  4c:	97 87       	std	Z+15, r25	; 0x0f
  4e:	a0 8b       	std	Z+16, r26	; 0x10
  50:	b1 8b       	std	Z+17, r27	; 0x11
  52:	13 a2       	std	Z+35, r1	; 0x23
  54:	12 a2       	std	Z+34, r1	; 0x22
	capsense_handle->calibration_sum += capsense_handle->sensed_pulsewidth;
  56:	10 82       	st	Z, r1
  58:	11 82       	std	Z+1, r1	; 0x01
  5a:	12 82       	std	Z+2, r1	; 0x02
  5c:	13 82       	std	Z+3, r1	; 0x03
  5e:	08 95       	ret

00000060 <init_llmod>:
  60:	fc 01       	movw	r30, r24
  62:	11 82       	std	Z+1, r1	; 0x01
  64:	10 82       	st	Z, r1
  66:	13 82       	std	Z+3, r1	; 0x03
  68:	12 82       	std	Z+2, r1	; 0x02
  6a:	14 82       	std	Z+4, r1	; 0x04
  6c:	17 82       	std	Z+7, r1	; 0x07
  6e:	10 86       	std	Z+8, r1	; 0x08
  70:	11 86       	std	Z+9, r1	; 0x09
  72:	12 86       	std	Z+10, r1	; 0x0a
  74:	13 86       	std	Z+11, r1	; 0x0b
  76:	14 86       	std	Z+12, r1	; 0x0c
  78:	15 86       	std	Z+13, r1	; 0x0d
	capsense_handle->calibration = capsense_handle->calibration_sum / capsense_handle->completed_cycles;	
  7a:	16 86       	std	Z+14, r1	; 0x0e
  7c:	81 ea       	ldi	r24, 0xA1	; 161
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	90 8b       	std	Z+16, r25	; 0x10
  82:	87 87       	std	Z+15, r24	; 0x0f
	
	if ( capsense_handle->sensed_pulsewidth > capsense_handle->calibration )
  84:	08 95       	ret

00000086 <sys_init>:
}

void sys_init()
{
	//Disable global Interrupts
	cli();
  86:	f8 94       	cli
	
	//Set clock prescaler to 1 (8MHz)
	CLKPR = 1<<CLKPCE;
  88:	80 e8       	ldi	r24, 0x80	; 128
  8a:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
  8c:	16 bc       	out	0x26, r1	; 38
	
	//Enable PLL, wait for it to achieve lock and then enable the clock for Timer/Counter 1:
	PLLCSR = (1 << PLLE);
  8e:	82 e0       	ldi	r24, 0x02	; 2
  90:	87 bd       	out	0x27, r24	; 39
	while ( (PLLCSR & (1<<PLOCK)) == 0 );
  92:	07 b4       	in	r0, 0x27	; 39
  94:	00 fe       	sbrs	r0, 0
  96:	fd cf       	rjmp	.-6      	; 0x92 <sys_init+0xc>
	PLLCSR |= (1 << PCKE);
  98:	87 b5       	in	r24, 0x27	; 39
  9a:	84 60       	ori	r24, 0x04	; 4
  9c:	87 bd       	out	0x27, r24	; 39

	//Configure Ports PB0, PB3 and PB4 as output for motor control:
	DDRB |= (1<<DDB0) | (1<<DDB3) | (1<<DDB4);
  9e:	87 b3       	in	r24, 0x17	; 23
  a0:	89 61       	ori	r24, 0x19	; 25
  a2:	87 bb       	out	0x17, r24	; 23
	
	//1ms CTC interrupt:
	TCCR1 = (1<<CTC1)|(5<<CS10);   // CTC  mode
  a4:	85 e8       	ldi	r24, 0x85	; 133
  a6:	80 bf       	out	0x30, r24	; 48
	OCR1C = 39;  // 10µs
  a8:	87 e2       	ldi	r24, 0x27	; 39
  aa:	8d bd       	out	0x2d, r24	; 45
	TIMSK |= (1<<OCIE1A);
  ac:	89 b7       	in	r24, 0x39	; 57
  ae:	80 64       	ori	r24, 0x40	; 64
  b0:	89 bf       	out	0x39, r24	; 57
	
	sei();
  b2:	78 94       	sei
	
	//PWM for speed setting:
	TCCR0A = 3<<COM0A0 | 3<<WGM00;
  b4:	83 ec       	ldi	r24, 0xC3	; 195
  b6:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = 0<<WGM02 | 2<<CS00;
  b8:	82 e0       	ldi	r24, 0x02	; 2
  ba:	83 bf       	out	0x33, r24	; 51
  bc:	08 95       	ret

000000be <main>:
uint32_t last_time_sense = 0;
uint32_t last_time_switch = 0;

int main(void)
{
	sys_init();
  be:	e3 df       	rcall	.-58     	; 0x86 <sys_init>

	init_random( &prng1 );
  c0:	81 ea       	ldi	r24, 0xA1	; 161
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	0e d0       	rcall	.+28     	; 0xe2 <init_random>
	init_llmod( &llmod );
  c6:	8a e8       	ldi	r24, 0x8A	; 138
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	ca df       	rcall	.-108    	; 0x60 <init_llmod>
	init_capsense( &capsense );	
  cc:	86 e6       	ldi	r24, 0x66	; 102
  ce:	90 e0       	ldi	r25, 0x00	; 0
  d0:	b7 df       	rcall	.-146    	; 0x40 <init_capsense>
#elif defined(DEBUG_CAPSENSE_RAW)
while(1)
{
	//sense_cycle( &capsense );
	
				DDRB &= ~(1<<DDB2);
  d2:	ba 98       	cbi	0x17, 2	; 23
				PORTB &= ~(1<<PORTB2);
  d4:	c2 98       	cbi	0x18, 2	; 24
	DDRB &= ~(1<<DDB1);
  d6:	b9 98       	cbi	0x17, 1	; 23
	PORTB &= ~(1<<PORTB1);
  d8:	c1 98       	cbi	0x18, 1	; 24
	DDRB |= (1<<DDB1);
  da:	b9 9a       	sbi	0x17, 1	; 23
	PORTB &= ~(1<<PORTB1);
  dc:	c1 98       	cbi	0x18, 1	; 24
	PORTB |= (1<<PORTB1);
  de:	c1 9a       	sbi	0x18, 1	; 24
	while(1);
  e0:	ff cf       	rjmp	.-2      	; 0xe0 <main+0x22>

000000e2 <init_random>:
}

uint32_t get_random( prngTypeDef* prng_handle )
{
	prng_handle->m_z = 36969L * (prng_handle->m_z & 65535L) + (prng_handle->m_z >> 16);
	prng_handle->m_w = 18000L * (prng_handle->m_w & 65535L) + (prng_handle->m_w >> 16);
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	50 e0       	ldi	r21, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	70 e0       	ldi	r23, 0x00	; 0
  ea:	fc 01       	movw	r30, r24
  ec:	40 83       	st	Z, r20
  ee:	51 83       	std	Z+1, r21	; 0x01
  f0:	62 83       	std	Z+2, r22	; 0x02
  f2:	73 83       	std	Z+3, r23	; 0x03
  f4:	42 e0       	ldi	r20, 0x02	; 2
  f6:	50 e0       	ldi	r21, 0x00	; 0
  f8:	60 e0       	ldi	r22, 0x00	; 0
  fa:	70 e0       	ldi	r23, 0x00	; 0
  fc:	44 83       	std	Z+4, r20	; 0x04
  fe:	55 83       	std	Z+5, r21	; 0x05
 100:	66 83       	std	Z+6, r22	; 0x06
 102:	77 83       	std	Z+7, r23	; 0x07
 104:	ef ea       	ldi	r30, 0xAF	; 175
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 e0       	ldi	r24, 0x00	; 0
 10a:	91 e0       	ldi	r25, 0x01	; 1
 10c:	a0 e0       	ldi	r26, 0x00	; 0
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	80 83       	st	Z, r24
 112:	91 83       	std	Z+1, r25	; 0x01
 114:	a2 83       	std	Z+2, r26	; 0x02
 116:	b3 83       	std	Z+3, r27	; 0x03
 118:	81 e0       	ldi	r24, 0x01	; 1
 11a:	90 e0       	ldi	r25, 0x00	; 0
	return (prng_handle->m_z << 16) + prng_handle->m_w;  /* 32-bit result */
 11c:	95 83       	std	Z+5, r25	; 0x05
 11e:	84 83       	std	Z+4, r24	; 0x04
 120:	e9 ea       	ldi	r30, 0xA9	; 169
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	40 83       	st	Z, r20
 126:	51 83       	std	Z+1, r21	; 0x01
 128:	62 83       	std	Z+2, r22	; 0x02
 12a:	73 83       	std	Z+3, r23	; 0x03
 12c:	15 82       	std	Z+5, r1	; 0x05
}
 12e:	14 82       	std	Z+4, r1	; 0x04
 130:	08 95       	ret

00000132 <__vector_3>:

static volatile uint32_t milliseconds = 0;
static volatile uint16_t microseconds = 0;

ISR(TIMER1_COMPA_vect)
{				
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	2f 93       	push	r18
 13e:	8f 93       	push	r24
 140:	9f 93       	push	r25
 142:	af 93       	push	r26
 144:	bf 93       	push	r27
	microseconds += 10;
 146:	80 91 60 00 	lds	r24, 0x0060
 14a:	90 91 61 00 	lds	r25, 0x0061
 14e:	0a 96       	adiw	r24, 0x0a	; 10
 150:	90 93 61 00 	sts	0x0061, r25
 154:	80 93 60 00 	sts	0x0060, r24
	if ( microseconds == 1000 )
 158:	80 91 60 00 	lds	r24, 0x0060
 15c:	90 91 61 00 	lds	r25, 0x0061
 160:	88 3e       	cpi	r24, 0xE8	; 232
 162:	93 40       	sbci	r25, 0x03	; 3
 164:	b9 f4       	brne	.+46     	; 0x194 <__vector_3+0x62>
	{
		microseconds = 0;
 166:	10 92 61 00 	sts	0x0061, r1
 16a:	10 92 60 00 	sts	0x0060, r1
		milliseconds++;
 16e:	80 91 62 00 	lds	r24, 0x0062
 172:	90 91 63 00 	lds	r25, 0x0063
 176:	a0 91 64 00 	lds	r26, 0x0064
 17a:	b0 91 65 00 	lds	r27, 0x0065
 17e:	01 96       	adiw	r24, 0x01	; 1
 180:	a1 1d       	adc	r26, r1
 182:	b1 1d       	adc	r27, r1
 184:	80 93 62 00 	sts	0x0062, r24
 188:	90 93 63 00 	sts	0x0063, r25
 18c:	a0 93 64 00 	sts	0x0064, r26
 190:	b0 93 65 00 	sts	0x0065, r27
	}
}
 194:	bf 91       	pop	r27
 196:	af 91       	pop	r26
 198:	9f 91       	pop	r25
 19a:	8f 91       	pop	r24
 19c:	2f 91       	pop	r18
 19e:	0f 90       	pop	r0
 1a0:	0f be       	out	0x3f, r0	; 63
 1a2:	0f 90       	pop	r0
 1a4:	1f 90       	pop	r1
 1a6:	18 95       	reti

000001a8 <exit>:
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 1a8:	f8 94       	cli
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <_exit>

000001ac <_exit>:
 1ac:	f8 94       	cli

000001ae <__stop_program>:
		__ticks = 1;
	else if (__tmp > 65535)
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <__stop_program>
