
llmod-gen-0.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000e3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000eb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000040  00800060  00800060  00000eb2  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000eb2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000f14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001259  00000000  00000000  00001070  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e2  00000000  00000000  000022c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006d1  00000000  00000000  000029ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d4  00000000  00000000  0000307c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000622  00000000  00000000  00003450  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fc4  00000000  00000000  00003a72  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00004a36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
   4:	27 c0       	rjmp	.+78     	; 0x54 <__bad_interrupt>
   6:	d4 c4       	rjmp	.+2472   	; 0x9b0 <__vector_3>
   8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
   a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
   c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
   e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
  10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
  12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
  14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
  16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
  18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
  1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
  1c:	1b c0       	rjmp	.+54     	; 0x54 <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61

0000002a <__do_copy_data>:
  2a:	10 e0       	ldi	r17, 0x00	; 0
  2c:	a0 e6       	ldi	r26, 0x60	; 96
  2e:	b0 e0       	ldi	r27, 0x00	; 0
  30:	ee e3       	ldi	r30, 0x3E	; 62
  32:	fe e0       	ldi	r31, 0x0E	; 14
  34:	02 c0       	rjmp	.+4      	; 0x3a <__do_copy_data+0x10>
  36:	05 90       	lpm	r0, Z+
  38:	0d 92       	st	X+, r0
  3a:	a0 36       	cpi	r26, 0x60	; 96
  3c:	b1 07       	cpc	r27, r17
  3e:	d9 f7       	brne	.-10     	; 0x36 <__do_copy_data+0xc>

00000040 <__do_clear_bss>:
  40:	20 e0       	ldi	r18, 0x00	; 0
  42:	a0 e6       	ldi	r26, 0x60	; 96
  44:	b0 e0       	ldi	r27, 0x00	; 0
  46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
  48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
  4a:	a0 3a       	cpi	r26, 0xA0	; 160
  4c:	b2 07       	cpc	r27, r18
  4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
  50:	39 d4       	rcall	.+2162   	; 0x8c4 <main>
  52:	4d c6       	rjmp	.+3226   	; 0xcee <exit>

00000054 <__bad_interrupt>:
  54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <init_capsense>:
{
	capsense_handle->CS_Timeout_Micros = timeout_micros;
}

void init_capsense( capsense_state_TypeDef* capsense_handle )
{
  56:	cf 93       	push	r28
  58:	df 93       	push	r29
  5a:	ec 01       	movw	r28, r24
	//Init variables for capsense:
	capsense_handle->error = 1;
  5c:	81 e0       	ldi	r24, 0x01	; 1
  5e:	88 83       	st	Y, r24

	capsense_handle->CS_Timeout_Micros = 300;
  60:	8c e2       	ldi	r24, 0x2C	; 44
  62:	91 e0       	ldi	r25, 0x01	; 1
  64:	a0 e0       	ldi	r26, 0x00	; 0
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	8d 83       	std	Y+5, r24	; 0x05
  6a:	9e 83       	std	Y+6, r25	; 0x06
  6c:	af 83       	std	Y+7, r26	; 0x07
  6e:	b8 87       	std	Y+8, r27	; 0x08
	capsense_handle->CS_Autocal_Millis = 20000;
  70:	80 e2       	ldi	r24, 0x20	; 32
  72:	9e e4       	ldi	r25, 0x4E	; 78
  74:	a0 e0       	ldi	r26, 0x00	; 0
  76:	b0 e0       	ldi	r27, 0x00	; 0
  78:	89 87       	std	Y+9, r24	; 0x09
  7a:	9a 87       	std	Y+10, r25	; 0x0a
  7c:	ab 87       	std	Y+11, r26	; 0x0b
  7e:	bc 87       	std	Y+12, r27	; 0x0c
		
	capsense_handle->leastTotal = 0x0FFFFFFFL;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	9f ef       	ldi	r25, 0xFF	; 255
  84:	af ef       	ldi	r26, 0xFF	; 255
  86:	bf e0       	ldi	r27, 0x0F	; 15
  88:	89 83       	std	Y+1, r24	; 0x01
  8a:	9a 83       	std	Y+2, r25	; 0x02
  8c:	ab 83       	std	Y+3, r26	; 0x03
  8e:	bc 83       	std	Y+4, r27	; 0x04
	capsense_handle->lastCal = millis();
  90:	ca d4       	rcall	.+2452   	; 0xa26 <millis>
  92:	6d 87       	std	Y+13, r22	; 0x0d
  94:	7e 87       	std	Y+14, r23	; 0x0e
  96:	8f 87       	std	Y+15, r24	; 0x0f
  98:	98 8b       	std	Y+16, r25	; 0x10
}
  9a:	df 91       	pop	r29
  9c:	cf 91       	pop	r28
  9e:	08 95       	ret

000000a0 <SenseOneCycle>:

int32_t SenseOneCycle( capsense_state_TypeDef* capsense_handle )
{
  a0:	8f 92       	push	r8
  a2:	9f 92       	push	r9
  a4:	af 92       	push	r10
  a6:	bf 92       	push	r11
  a8:	cf 92       	push	r12
  aa:	df 92       	push	r13
  ac:	ef 92       	push	r14
  ae:	ff 92       	push	r15
  b0:	0f 93       	push	r16
  b2:	1f 93       	push	r17
  b4:	cf 93       	push	r28
  b6:	df 93       	push	r29
  b8:	cd b7       	in	r28, 0x3d	; 61
  ba:	de b7       	in	r29, 0x3e	; 62
  bc:	28 97       	sbiw	r28, 0x08	; 8
  be:	0f b6       	in	r0, 0x3f	; 63
  c0:	f8 94       	cli
  c2:	de bf       	out	0x3e, r29	; 62
  c4:	0f be       	out	0x3f, r0	; 63
  c6:	cd bf       	out	0x3d, r28	; 61
  c8:	8c 01       	movw	r16, r24
	volatile uint32_t lastIncrementTime = 0;
  ca:	19 82       	std	Y+1, r1	; 0x01
  cc:	1a 82       	std	Y+2, r1	; 0x02
  ce:	1b 82       	std	Y+3, r1	; 0x03
  d0:	1c 82       	std	Y+4, r1	; 0x04
	uint32_t minIncrementDelay = 10; //µs
	volatile uint32_t cycleTime = 0;
  d2:	1d 82       	std	Y+5, r1	; 0x05
  d4:	1e 82       	std	Y+6, r1	; 0x06
  d6:	1f 82       	std	Y+7, r1	; 0x07
  d8:	18 86       	std	Y+8, r1	; 0x08
	
	//Debug
	//PORTB |= (1<<PB3);
	//
	
	cli();
  da:	f8 94       	cli
	PORTB &= ~(1<<PORTB1);
  dc:	c1 98       	cbi	0x18, 1	; 24
	DDRB &= ~(1<<DDB2);
  de:	ba 98       	cbi	0x17, 2	; 23
	DDRB |= (1<<DDB2);
  e0:	ba 9a       	sbi	0x17, 2	; 23
	PORTB &= ~(1<<PORTB2);
  e2:	c2 98       	cbi	0x18, 2	; 24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  e4:	8a e1       	ldi	r24, 0x1A	; 26
  e6:	8a 95       	dec	r24
  e8:	f1 f7       	brne	.-4      	; 0xe6 <SenseOneCycle+0x46>
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
  ea:	ba 98       	cbi	0x17, 2	; 23
	PORTB |= (1<<PORTB1);
  ec:	c1 9a       	sbi	0x18, 1	; 24
	sei();
  ee:	78 94       	sei
int32_t SenseOneCycle( capsense_state_TypeDef* capsense_handle )
{
	volatile uint32_t lastIncrementTime = 0;
	uint32_t minIncrementDelay = 10; //µs
	volatile uint32_t cycleTime = 0;
	uint32_t cycleTotal = 0;
  f0:	c1 2c       	mov	r12, r1
  f2:	d1 2c       	mov	r13, r1
  f4:	76 01       	movw	r14, r12
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
	PORTB |= (1<<PORTB1);
	sei();
	
	while ( !(PINB & (1<<PINB2)) && ( cycleTotal < capsense_handle->CS_Timeout_Micros ) )
  f6:	61 c0       	rjmp	.+194    	; 0x1ba <SenseOneCycle+0x11a>
	{
		//Timestamp of the current measurement:
		cycleTime = (millis()*1000 + micros());
  f8:	96 d4       	rcall	.+2348   	; 0xa26 <millis>
  fa:	4b 01       	movw	r8, r22
  fc:	5c 01       	movw	r10, r24
  fe:	9c d4       	rcall	.+2360   	; 0xa38 <micros>
 100:	b5 01       	movw	r22, r10
 102:	a4 01       	movw	r20, r8
 104:	44 0f       	add	r20, r20
 106:	55 1f       	adc	r21, r21
 108:	66 1f       	adc	r22, r22
 10a:	77 1f       	adc	r23, r23
 10c:	44 0f       	add	r20, r20
 10e:	55 1f       	adc	r21, r21
 110:	66 1f       	adc	r22, r22
 112:	77 1f       	adc	r23, r23
 114:	44 0f       	add	r20, r20
 116:	55 1f       	adc	r21, r21
 118:	66 1f       	adc	r22, r22
 11a:	77 1f       	adc	r23, r23
 11c:	4a 01       	movw	r8, r20
 11e:	5b 01       	movw	r10, r22
 120:	88 0c       	add	r8, r8
 122:	99 1c       	adc	r9, r9
 124:	aa 1c       	adc	r10, r10
 126:	bb 1c       	adc	r11, r11
 128:	88 0c       	add	r8, r8
 12a:	99 1c       	adc	r9, r9
 12c:	aa 1c       	adc	r10, r10
 12e:	bb 1c       	adc	r11, r11
 130:	48 0d       	add	r20, r8
 132:	59 1d       	adc	r21, r9
 134:	6a 1d       	adc	r22, r10
 136:	7b 1d       	adc	r23, r11
 138:	4a 01       	movw	r8, r20
 13a:	5b 01       	movw	r10, r22
 13c:	88 0c       	add	r8, r8
 13e:	99 1c       	adc	r9, r9
 140:	aa 1c       	adc	r10, r10
 142:	bb 1c       	adc	r11, r11
 144:	88 0c       	add	r8, r8
 146:	99 1c       	adc	r9, r9
 148:	aa 1c       	adc	r10, r10
 14a:	bb 1c       	adc	r11, r11
 14c:	48 0d       	add	r20, r8
 14e:	59 1d       	adc	r21, r9
 150:	6a 1d       	adc	r22, r10
 152:	7b 1d       	adc	r23, r11
 154:	4a 01       	movw	r8, r20
 156:	5b 01       	movw	r10, r22
 158:	88 0c       	add	r8, r8
 15a:	99 1c       	adc	r9, r9
 15c:	aa 1c       	adc	r10, r10
 15e:	bb 1c       	adc	r11, r11
 160:	88 0c       	add	r8, r8
 162:	99 1c       	adc	r9, r9
 164:	aa 1c       	adc	r10, r10
 166:	bb 1c       	adc	r11, r11
 168:	48 0d       	add	r20, r8
 16a:	59 1d       	adc	r21, r9
 16c:	6a 1d       	adc	r22, r10
 16e:	7b 1d       	adc	r23, r11
 170:	48 0f       	add	r20, r24
 172:	59 1f       	adc	r21, r25
 174:	61 1d       	adc	r22, r1
 176:	71 1d       	adc	r23, r1
 178:	4d 83       	std	Y+5, r20	; 0x05
 17a:	5e 83       	std	Y+6, r21	; 0x06
 17c:	6f 83       	std	Y+7, r22	; 0x07
 17e:	78 87       	std	Y+8, r23	; 0x08
		
		//Increment the value only if it is time to increment:
		if ( (cycleTime - lastIncrementTime) >= minIncrementDelay )
 180:	8d 81       	ldd	r24, Y+5	; 0x05
 182:	9e 81       	ldd	r25, Y+6	; 0x06
 184:	af 81       	ldd	r26, Y+7	; 0x07
 186:	b8 85       	ldd	r27, Y+8	; 0x08
 188:	49 81       	ldd	r20, Y+1	; 0x01
 18a:	5a 81       	ldd	r21, Y+2	; 0x02
 18c:	6b 81       	ldd	r22, Y+3	; 0x03
 18e:	7c 81       	ldd	r23, Y+4	; 0x04
 190:	84 1b       	sub	r24, r20
 192:	95 0b       	sbc	r25, r21
 194:	a6 0b       	sbc	r26, r22
 196:	b7 0b       	sbc	r27, r23
 198:	0a 97       	sbiw	r24, 0x0a	; 10
 19a:	a1 05       	cpc	r26, r1
 19c:	b1 05       	cpc	r27, r1
 19e:	68 f0       	brcs	.+26     	; 0x1ba <SenseOneCycle+0x11a>
		{
			cycleTotal += minIncrementDelay;
 1a0:	8a e0       	ldi	r24, 0x0A	; 10
 1a2:	c8 0e       	add	r12, r24
 1a4:	d1 1c       	adc	r13, r1
 1a6:	e1 1c       	adc	r14, r1
 1a8:	f1 1c       	adc	r15, r1
			lastIncrementTime = cycleTime;
 1aa:	8d 81       	ldd	r24, Y+5	; 0x05
 1ac:	9e 81       	ldd	r25, Y+6	; 0x06
 1ae:	af 81       	ldd	r26, Y+7	; 0x07
 1b0:	b8 85       	ldd	r27, Y+8	; 0x08
 1b2:	89 83       	std	Y+1, r24	; 0x01
 1b4:	9a 83       	std	Y+2, r25	; 0x02
 1b6:	ab 83       	std	Y+3, r26	; 0x03
 1b8:	bc 83       	std	Y+4, r27	; 0x04
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
	PORTB |= (1<<PORTB1);
	sei();
	
	while ( !(PINB & (1<<PINB2)) && ( cycleTotal < capsense_handle->CS_Timeout_Micros ) )
 1ba:	b2 99       	sbic	0x16, 2	; 22
 1bc:	0b c0       	rjmp	.+22     	; 0x1d4 <SenseOneCycle+0x134>
 1be:	f8 01       	movw	r30, r16
 1c0:	85 81       	ldd	r24, Z+5	; 0x05
 1c2:	96 81       	ldd	r25, Z+6	; 0x06
 1c4:	a7 81       	ldd	r26, Z+7	; 0x07
 1c6:	b0 85       	ldd	r27, Z+8	; 0x08
 1c8:	c8 16       	cp	r12, r24
 1ca:	d9 06       	cpc	r13, r25
 1cc:	ea 06       	cpc	r14, r26
 1ce:	fb 06       	cpc	r15, r27
 1d0:	08 f4       	brcc	.+2      	; 0x1d4 <SenseOneCycle+0x134>
 1d2:	92 cf       	rjmp	.-220    	; 0xf8 <SenseOneCycle+0x58>
			lastIncrementTime = cycleTime;
		}
	}

	//Add this cycles total time to the accumulated total:
	capsense_handle->total += cycleTotal;
 1d4:	f8 01       	movw	r30, r16
 1d6:	81 89       	ldd	r24, Z+17	; 0x11
 1d8:	92 89       	ldd	r25, Z+18	; 0x12
 1da:	a3 89       	ldd	r26, Z+19	; 0x13
 1dc:	b4 89       	ldd	r27, Z+20	; 0x14
 1de:	8c 0d       	add	r24, r12
 1e0:	9d 1d       	adc	r25, r13
 1e2:	ae 1d       	adc	r26, r14
 1e4:	bf 1d       	adc	r27, r15
 1e6:	81 8b       	std	Z+17, r24	; 0x11
 1e8:	92 8b       	std	Z+18, r25	; 0x12
 1ea:	a3 8b       	std	Z+19, r26	; 0x13
 1ec:	b4 8b       	std	Z+20, r27	; 0x14

	//Debug:
	//PORTB &= ~(1<<PB3);
	//
	
	cli();
 1ee:	f8 94       	cli
	PORTB |= (1<<PORTB2);
 1f0:	c2 9a       	sbi	0x18, 2	; 24
	DDRB |= (1<<DDB2);
 1f2:	ba 9a       	sbi	0x17, 2	; 23
	PORTB |= (1<<PORTB2);
 1f4:	c2 9a       	sbi	0x18, 2	; 24
	DDRB &= ~(1<<DDB2);
 1f6:	ba 98       	cbi	0x17, 2	; 23
	PORTB &= ~(1<<PORTB1);
 1f8:	c1 98       	cbi	0x18, 1	; 24
	sei();
 1fa:	78 94       	sei

	DDRB |= (1<<DDB2);
 1fc:	ba 9a       	sbi	0x17, 2	; 23
	PORTB &= ~(1<<PORTB2);
 1fe:	c2 98       	cbi	0x18, 2	; 24
 200:	8a e1       	ldi	r24, 0x1A	; 26
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <SenseOneCycle+0x162>
	_delay_us(10);
	DDRB &= ~(1<<DDB2);
 206:	ba 98       	cbi	0x17, 2	; 23
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 208:	88 ec       	ldi	r24, 0xC8	; 200
 20a:	90 e0       	ldi	r25, 0x00	; 0
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <SenseOneCycle+0x16c>
	
	_delay_us(100);

	if (cycleTotal >= capsense_handle->CS_Timeout_Micros)
 210:	85 81       	ldd	r24, Z+5	; 0x05
 212:	96 81       	ldd	r25, Z+6	; 0x06
 214:	a7 81       	ldd	r26, Z+7	; 0x07
 216:	b0 85       	ldd	r27, Z+8	; 0x08
 218:	c8 16       	cp	r12, r24
 21a:	d9 06       	cpc	r13, r25
 21c:	ea 06       	cpc	r14, r26
 21e:	fb 06       	cpc	r15, r27
 220:	28 f4       	brcc	.+10     	; 0x22c <SenseOneCycle+0x18c>
	{
		return -2;     // total variable over timeout
	}
	else
	{
		return 1;
 222:	61 e0       	ldi	r22, 0x01	; 1
 224:	70 e0       	ldi	r23, 0x00	; 0
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	04 c0       	rjmp	.+8      	; 0x234 <SenseOneCycle+0x194>
	
	_delay_us(100);

	if (cycleTotal >= capsense_handle->CS_Timeout_Micros)
	{
		return -2;     // total variable over timeout
 22c:	6e ef       	ldi	r22, 0xFE	; 254
 22e:	7f ef       	ldi	r23, 0xFF	; 255
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	9f ef       	ldi	r25, 0xFF	; 255
	}
	else
	{
		return 1;
	}
 234:	28 96       	adiw	r28, 0x08	; 8
 236:	0f b6       	in	r0, 0x3f	; 63
 238:	f8 94       	cli
 23a:	de bf       	out	0x3e, r29	; 62
 23c:	0f be       	out	0x3f, r0	; 63
 23e:	cd bf       	out	0x3d, r28	; 61
 240:	df 91       	pop	r29
 242:	cf 91       	pop	r28
 244:	1f 91       	pop	r17
 246:	0f 91       	pop	r16
 248:	ff 90       	pop	r15
 24a:	ef 90       	pop	r14
 24c:	df 90       	pop	r13
 24e:	cf 90       	pop	r12
 250:	bf 90       	pop	r11
 252:	af 90       	pop	r10
 254:	9f 90       	pop	r9
 256:	8f 90       	pop	r8
 258:	08 95       	ret

0000025a <capacitiveSensor>:
	else
		return 0;
}

int32_t capacitiveSensor( capsense_state_TypeDef* capsense_handle, uint8_t samples )
{
 25a:	cf 92       	push	r12
 25c:	df 92       	push	r13
 25e:	ef 92       	push	r14
 260:	ff 92       	push	r15
 262:	0f 93       	push	r16
 264:	1f 93       	push	r17
 266:	cf 93       	push	r28
 268:	df 93       	push	r29
	capsense_handle->total = 0;
 26a:	fc 01       	movw	r30, r24
 26c:	11 8a       	std	Z+17, r1	; 0x11
 26e:	12 8a       	std	Z+18, r1	; 0x12
 270:	13 8a       	std	Z+19, r1	; 0x13
 272:	14 8a       	std	Z+20, r1	; 0x14
	if (samples == 0) return 0;
 274:	66 23       	and	r22, r22
 276:	09 f4       	brne	.+2      	; 0x27a <__stack+0x1b>
 278:	6a c0       	rjmp	.+212    	; 0x34e <__stack+0xef>
	if (capsense_handle->error < 0) return -1;            // bad pin
 27a:	20 81       	ld	r18, Z
 27c:	22 23       	and	r18, r18
 27e:	0c f4       	brge	.+2      	; 0x282 <__stack+0x23>
 280:	6a c0       	rjmp	.+212    	; 0x356 <__stack+0xf7>
 282:	d6 2f       	mov	r29, r22
 284:	8c 01       	movw	r16, r24
 286:	c0 e0       	ldi	r28, 0x00	; 0

	for (uint8_t i = 0; i < samples; i++)
	{    // loop for samples parameter - simple lowpass filter
		if (SenseOneCycle(capsense_handle) < 0)  return -2;   // variable over timeout
 288:	c8 01       	movw	r24, r16
 28a:	0a df       	rcall	.-492    	; 0xa0 <SenseOneCycle>
 28c:	99 23       	and	r25, r25
 28e:	0c f4       	brge	.+2      	; 0x292 <__stack+0x33>
 290:	66 c0       	rjmp	.+204    	; 0x35e <__stack+0xff>
{
	capsense_handle->total = 0;
	if (samples == 0) return 0;
	if (capsense_handle->error < 0) return -1;            // bad pin

	for (uint8_t i = 0; i < samples; i++)
 292:	cf 5f       	subi	r28, 0xFF	; 255
 294:	cd 13       	cpse	r28, r29
 296:	f8 cf       	rjmp	.-16     	; 0x288 <__stack+0x29>
	}

		// only calibrate if time is greater than CS_AutocaL_Millis and total is less than 10% of baseline
		// this is an attempt to keep from calibrating when the sensor is seeing a "touched" signal

		if ( (millis() - capsense_handle->lastCal > capsense_handle->CS_Autocal_Millis) && abs(capsense_handle->total  - capsense_handle->leastTotal) < (int)(.10 * (float)capsense_handle->leastTotal) ) {
 298:	c6 d3       	rcall	.+1932   	; 0xa26 <millis>
 29a:	f8 01       	movw	r30, r16
 29c:	c5 84       	ldd	r12, Z+13	; 0x0d
 29e:	d6 84       	ldd	r13, Z+14	; 0x0e
 2a0:	e7 84       	ldd	r14, Z+15	; 0x0f
 2a2:	f0 88       	ldd	r15, Z+16	; 0x10
 2a4:	dc 01       	movw	r26, r24
 2a6:	cb 01       	movw	r24, r22
 2a8:	8c 19       	sub	r24, r12
 2aa:	9d 09       	sbc	r25, r13
 2ac:	ae 09       	sbc	r26, r14
 2ae:	bf 09       	sbc	r27, r15
 2b0:	c1 84       	ldd	r12, Z+9	; 0x09
 2b2:	d2 84       	ldd	r13, Z+10	; 0x0a
 2b4:	e3 84       	ldd	r14, Z+11	; 0x0b
 2b6:	f4 84       	ldd	r15, Z+12	; 0x0c
 2b8:	c8 16       	cp	r12, r24
 2ba:	d9 06       	cpc	r13, r25
 2bc:	ea 06       	cpc	r14, r26
 2be:	fb 06       	cpc	r15, r27
 2c0:	40 f5       	brcc	.+80     	; 0x312 <__stack+0xb3>
 2c2:	61 81       	ldd	r22, Z+1	; 0x01
 2c4:	72 81       	ldd	r23, Z+2	; 0x02
 2c6:	83 81       	ldd	r24, Z+3	; 0x03
 2c8:	94 81       	ldd	r25, Z+4	; 0x04
 2ca:	21 89       	ldd	r18, Z+17	; 0x11
 2cc:	32 89       	ldd	r19, Z+18	; 0x12
 2ce:	26 1b       	sub	r18, r22
 2d0:	37 0b       	sbc	r19, r23
 2d2:	e9 01       	movw	r28, r18
 2d4:	dd 23       	and	r29, r29
 2d6:	24 f4       	brge	.+8      	; 0x2e0 <__stack+0x81>
 2d8:	cc 27       	eor	r28, r28
 2da:	dd 27       	eor	r29, r29
 2dc:	c2 1b       	sub	r28, r18
 2de:	d3 0b       	sbc	r29, r19
 2e0:	e5 d3       	rcall	.+1994   	; 0xaac <__floatunsisf>
 2e2:	2d ec       	ldi	r18, 0xCD	; 205
 2e4:	3c ec       	ldi	r19, 0xCC	; 204
 2e6:	4c ec       	ldi	r20, 0xCC	; 204
 2e8:	5d e3       	ldi	r21, 0x3D	; 61
 2ea:	6e d4       	rcall	.+2268   	; 0xbc8 <__mulsf3>
 2ec:	ae d3       	rcall	.+1884   	; 0xa4a <__fixsfsi>
 2ee:	c6 17       	cp	r28, r22
 2f0:	d7 07       	cpc	r29, r23
 2f2:	7c f4       	brge	.+30     	; 0x312 <__stack+0xb3>

			capsense_handle->leastTotal = 0x0FFFFFFFL;          // reset for "autocalibrate"
 2f4:	8f ef       	ldi	r24, 0xFF	; 255
 2f6:	9f ef       	ldi	r25, 0xFF	; 255
 2f8:	af ef       	ldi	r26, 0xFF	; 255
 2fa:	bf e0       	ldi	r27, 0x0F	; 15
 2fc:	f8 01       	movw	r30, r16
 2fe:	81 83       	std	Z+1, r24	; 0x01
 300:	92 83       	std	Z+2, r25	; 0x02
 302:	a3 83       	std	Z+3, r26	; 0x03
 304:	b4 83       	std	Z+4, r27	; 0x04
			capsense_handle->lastCal = millis();
 306:	8f d3       	rcall	.+1822   	; 0xa26 <millis>
 308:	f8 01       	movw	r30, r16
 30a:	65 87       	std	Z+13, r22	; 0x0d
 30c:	76 87       	std	Z+14, r23	; 0x0e
 30e:	87 87       	std	Z+15, r24	; 0x0f
 310:	90 8b       	std	Z+16, r25	; 0x10
		}

	// routine to subtract baseline (non-sensed capacitance) from sensor return
	if (capsense_handle->total < capsense_handle->leastTotal) capsense_handle->leastTotal = capsense_handle->total;                 // set floor value to subtract from sensed value
 312:	f8 01       	movw	r30, r16
 314:	81 89       	ldd	r24, Z+17	; 0x11
 316:	92 89       	ldd	r25, Z+18	; 0x12
 318:	a3 89       	ldd	r26, Z+19	; 0x13
 31a:	b4 89       	ldd	r27, Z+20	; 0x14
 31c:	c1 80       	ldd	r12, Z+1	; 0x01
 31e:	d2 80       	ldd	r13, Z+2	; 0x02
 320:	e3 80       	ldd	r14, Z+3	; 0x03
 322:	f4 80       	ldd	r15, Z+4	; 0x04
 324:	8c 15       	cp	r24, r12
 326:	9d 05       	cpc	r25, r13
 328:	ae 05       	cpc	r26, r14
 32a:	bf 05       	cpc	r27, r15
 32c:	20 f4       	brcc	.+8      	; 0x336 <__stack+0xd7>
 32e:	81 83       	std	Z+1, r24	; 0x01
 330:	92 83       	std	Z+2, r25	; 0x02
 332:	a3 83       	std	Z+3, r26	; 0x03
 334:	b4 83       	std	Z+4, r27	; 0x04
	return(capsense_handle->total - capsense_handle->leastTotal);
 336:	f8 01       	movw	r30, r16
 338:	01 81       	ldd	r16, Z+1	; 0x01
 33a:	12 81       	ldd	r17, Z+2	; 0x02
 33c:	23 81       	ldd	r18, Z+3	; 0x03
 33e:	34 81       	ldd	r19, Z+4	; 0x04
 340:	bc 01       	movw	r22, r24
 342:	cd 01       	movw	r24, r26
 344:	60 1b       	sub	r22, r16
 346:	71 0b       	sbc	r23, r17
 348:	82 0b       	sbc	r24, r18
 34a:	93 0b       	sbc	r25, r19
 34c:	0c c0       	rjmp	.+24     	; 0x366 <__stack+0x107>
}

int32_t capacitiveSensor( capsense_state_TypeDef* capsense_handle, uint8_t samples )
{
	capsense_handle->total = 0;
	if (samples == 0) return 0;
 34e:	60 e0       	ldi	r22, 0x00	; 0
 350:	70 e0       	ldi	r23, 0x00	; 0
 352:	cb 01       	movw	r24, r22
 354:	08 c0       	rjmp	.+16     	; 0x366 <__stack+0x107>
	if (capsense_handle->error < 0) return -1;            // bad pin
 356:	6f ef       	ldi	r22, 0xFF	; 255
 358:	7f ef       	ldi	r23, 0xFF	; 255
 35a:	cb 01       	movw	r24, r22
 35c:	04 c0       	rjmp	.+8      	; 0x366 <__stack+0x107>

	for (uint8_t i = 0; i < samples; i++)
	{    // loop for samples parameter - simple lowpass filter
		if (SenseOneCycle(capsense_handle) < 0)  return -2;   // variable over timeout
 35e:	6e ef       	ldi	r22, 0xFE	; 254
 360:	7f ef       	ldi	r23, 0xFF	; 255
 362:	8f ef       	ldi	r24, 0xFF	; 255
 364:	9f ef       	ldi	r25, 0xFF	; 255
		}

	// routine to subtract baseline (non-sensed capacitance) from sensor return
	if (capsense_handle->total < capsense_handle->leastTotal) capsense_handle->leastTotal = capsense_handle->total;                 // set floor value to subtract from sensed value
	return(capsense_handle->total - capsense_handle->leastTotal);
}
 366:	df 91       	pop	r29
 368:	cf 91       	pop	r28
 36a:	1f 91       	pop	r17
 36c:	0f 91       	pop	r16
 36e:	ff 90       	pop	r15
 370:	ef 90       	pop	r14
 372:	df 90       	pop	r13
 374:	cf 90       	pop	r12
 376:	08 95       	ret

00000378 <CapSensed>:
		return 0;
}

uint8_t CapSensed()
{
	if ( capacitiveSensor( &capsense, DEFAULT_SAMPLES ) >= CAPSENSE_THRESHOLD )
 378:	65 e0       	ldi	r22, 0x05	; 5
 37a:	84 e7       	ldi	r24, 0x74	; 116
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	6d df       	rcall	.-294    	; 0x25a <capacitiveSensor>
 380:	21 e0       	ldi	r18, 0x01	; 1
 382:	6f 30       	cpi	r22, 0x0F	; 15
 384:	71 05       	cpc	r23, r1
 386:	81 05       	cpc	r24, r1
 388:	91 05       	cpc	r25, r1
 38a:	0c f4       	brge	.+2      	; 0x38e <CapSensed+0x16>
 38c:	20 e0       	ldi	r18, 0x00	; 0
		return 1;
	else
		return 0;
}
 38e:	82 2f       	mov	r24, r18
 390:	08 95       	ret

00000392 <debounce_capsense>:
#include "time.h"

capsense_state_TypeDef capsense;

uint8_t debounce_capsense()
{
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
	static uint16_t state = 0;
	state = ( state << 1 ) | CapSensed() | 0xC000;
 396:	c0 91 60 00 	lds	r28, 0x0060
 39a:	d0 91 61 00 	lds	r29, 0x0061
 39e:	cc 0f       	add	r28, r28
 3a0:	dd 1f       	adc	r29, r29
 3a2:	ea df       	rcall	.-44     	; 0x378 <CapSensed>
 3a4:	9e 01       	movw	r18, r28
 3a6:	30 6c       	ori	r19, 0xC0	; 192
 3a8:	28 2b       	or	r18, r24
 3aa:	30 93 61 00 	sts	0x0061, r19
 3ae:	20 93 60 00 	sts	0x0060, r18
	
	if ( state == 0xFFFF)
 3b2:	81 e0       	ldi	r24, 0x01	; 1
 3b4:	2f 3f       	cpi	r18, 0xFF	; 255
 3b6:	3f 4f       	sbci	r19, 0xFF	; 255
 3b8:	09 f0       	breq	.+2      	; 0x3bc <debounce_capsense+0x2a>
 3ba:	80 e0       	ldi	r24, 0x00	; 0
		 return 1;
	else
		return 0;
}
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	08 95       	ret

000003c2 <init_llmod>:
		break;
	}
}

void init_llmod( llmod_state* llmod_handle )
{
 3c2:	fc 01       	movw	r30, r24
	llmod_handle->current_mode = START_MODE;
 3c4:	11 82       	std	Z+1, r1	; 0x01
 3c6:	10 82       	st	Z, r1
	llmod_handle->current_direction = 0;
 3c8:	13 82       	std	Z+3, r1	; 0x03
 3ca:	12 82       	std	Z+2, r1	; 0x02
	llmod_handle->current_speed = 0;
 3cc:	14 82       	std	Z+4, r1	; 0x04
	llmod_handle->m_w = PRNG_SEED_W;
	llmod_handle->m_w = PRNG_SEED_Z;
 3ce:	82 e0       	ldi	r24, 0x02	; 2
 3d0:	90 e0       	ldi	r25, 0x00	; 0
 3d2:	a0 e0       	ldi	r26, 0x00	; 0
 3d4:	b0 e0       	ldi	r27, 0x00	; 0
 3d6:	87 87       	std	Z+15, r24	; 0x0f
 3d8:	90 8b       	std	Z+16, r25	; 0x10
 3da:	a1 8b       	std	Z+17, r26	; 0x11
 3dc:	b2 8b       	std	Z+18, r27	; 0x12
	llmod_handle->last_rnd_change_time = 0;
 3de:	17 82       	std	Z+7, r1	; 0x07
 3e0:	10 86       	std	Z+8, r1	; 0x08
 3e2:	11 86       	std	Z+9, r1	; 0x09
 3e4:	12 86       	std	Z+10, r1	; 0x0a
	llmod_handle->event_timer = 0;
 3e6:	13 86       	std	Z+11, r1	; 0x0b
 3e8:	14 86       	std	Z+12, r1	; 0x0c
 3ea:	15 86       	std	Z+13, r1	; 0x0d
 3ec:	16 86       	std	Z+14, r1	; 0x0e
 3ee:	08 95       	ret

000003f0 <set_motor_direction>:
}

void set_motor_direction( llmod_direction direction )
{
	switch ( direction )
 3f0:	00 97       	sbiw	r24, 0x00	; 0
 3f2:	19 f0       	breq	.+6      	; 0x3fa <set_motor_direction+0xa>
 3f4:	01 97       	sbiw	r24, 0x01	; 1
 3f6:	21 f0       	breq	.+8      	; 0x400 <set_motor_direction+0x10>
 3f8:	08 95       	ret
	{
		case FORWARD:
		PORTB &= ~(1<<PB3);
 3fa:	c3 98       	cbi	0x18, 3	; 24
		PORTB |= (1<<PB4);
 3fc:	c4 9a       	sbi	0x18, 4	; 24
		break;
 3fe:	08 95       	ret
		
		case BACKWARD:
		PORTB |= (1<<PB3);
 400:	c3 9a       	sbi	0x18, 3	; 24
		PORTB &= ~(1<<PB4);
 402:	c4 98       	cbi	0x18, 4	; 24
 404:	08 95       	ret

00000406 <set_motor_off>:
	
}

void set_motor_off()
{
	PORTB &= ~(1<<PB3);
 406:	c3 98       	cbi	0x18, 3	; 24
	PORTB &= ~(1<<PB4);
 408:	c4 98       	cbi	0x18, 4	; 24
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	89 bd       	out	0x29, r24	; 41
 40e:	08 95       	ret

00000410 <pulse_motor>:
		break;
	}
}

void pulse_motor( uint32_t number_pulses, uint32_t pulse_length, uint32_t pulse_delay )
{
 410:	2f 92       	push	r2
 412:	3f 92       	push	r3
 414:	4f 92       	push	r4
 416:	5f 92       	push	r5
 418:	6f 92       	push	r6
 41a:	7f 92       	push	r7
 41c:	8f 92       	push	r8
 41e:	9f 92       	push	r9
 420:	af 92       	push	r10
 422:	bf 92       	push	r11
 424:	cf 92       	push	r12
 426:	df 92       	push	r13
 428:	ef 92       	push	r14
 42a:	ff 92       	push	r15
 42c:	0f 93       	push	r16
 42e:	1f 93       	push	r17
 430:	cf 93       	push	r28
 432:	df 93       	push	r29
 434:	cd b7       	in	r28, 0x3d	; 61
 436:	de b7       	in	r29, 0x3e	; 62
 438:	60 97       	sbiw	r28, 0x10	; 16
 43a:	0f b6       	in	r0, 0x3f	; 63
 43c:	f8 94       	cli
 43e:	de bf       	out	0x3e, r29	; 62
 440:	0f be       	out	0x3f, r0	; 63
 442:	cd bf       	out	0x3d, r28	; 61
 444:	4b 01       	movw	r8, r22
 446:	5c 01       	movw	r10, r24
 448:	29 87       	std	Y+9, r18	; 0x09
 44a:	3a 87       	std	Y+10, r19	; 0x0a
 44c:	4b 87       	std	Y+11, r20	; 0x0b
 44e:	5c 87       	std	Y+12, r21	; 0x0c
 450:	c8 01       	movw	r24, r16
 452:	b7 01       	movw	r22, r14
	_delay_ms(pulse_delay);
 454:	2b d3       	rcall	.+1622   	; 0xaac <__floatunsisf>
 456:	6d 87       	std	Y+13, r22	; 0x0d
 458:	7e 87       	std	Y+14, r23	; 0x0e
 45a:	8f 87       	std	Y+15, r24	; 0x0f
 45c:	98 8b       	std	Y+16, r25	; 0x10

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 45e:	20 e0       	ldi	r18, 0x00	; 0
 460:	30 e0       	ldi	r19, 0x00	; 0
 462:	4a ef       	ldi	r20, 0xFA	; 250
 464:	54 e4       	ldi	r21, 0x44	; 68
 466:	b0 d3       	rcall	.+1888   	; 0xbc8 <__mulsf3>
 468:	6d 83       	std	Y+5, r22	; 0x05
 46a:	7e 83       	std	Y+6, r23	; 0x06
 46c:	8f 83       	std	Y+7, r24	; 0x07
 46e:	98 87       	std	Y+8, r25	; 0x08
	if (__tmp < 1.0)
 470:	20 e0       	ldi	r18, 0x00	; 0
 472:	30 e0       	ldi	r19, 0x00	; 0
 474:	40 e8       	ldi	r20, 0x80	; 128
 476:	5f e3       	ldi	r21, 0x3F	; 63
 478:	e4 d2       	rcall	.+1480   	; 0xa42 <__cmpsf2>
 47a:	88 23       	and	r24, r24
 47c:	3c f1       	brlt	.+78     	; 0x4cc <pulse_motor+0xbc>
		__ticks = 1;
	else if (__tmp > 65535)
 47e:	20 e0       	ldi	r18, 0x00	; 0
 480:	3f ef       	ldi	r19, 0xFF	; 255
 482:	4f e7       	ldi	r20, 0x7F	; 127
 484:	57 e4       	ldi	r21, 0x47	; 71
 486:	6d 81       	ldd	r22, Y+5	; 0x05
 488:	7e 81       	ldd	r23, Y+6	; 0x06
 48a:	8f 81       	ldd	r24, Y+7	; 0x07
 48c:	98 85       	ldd	r25, Y+8	; 0x08
 48e:	98 d3       	rcall	.+1840   	; 0xbc0 <__gesf2>
 490:	18 16       	cp	r1, r24
 492:	b4 f4       	brge	.+44     	; 0x4c0 <pulse_motor+0xb0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 494:	20 e0       	ldi	r18, 0x00	; 0
 496:	30 e0       	ldi	r19, 0x00	; 0
 498:	40 e2       	ldi	r20, 0x20	; 32
 49a:	51 e4       	ldi	r21, 0x41	; 65
 49c:	6d 85       	ldd	r22, Y+13	; 0x0d
 49e:	7e 85       	ldd	r23, Y+14	; 0x0e
 4a0:	8f 85       	ldd	r24, Y+15	; 0x0f
 4a2:	98 89       	ldd	r25, Y+16	; 0x10
 4a4:	91 d3       	rcall	.+1826   	; 0xbc8 <__mulsf3>
 4a6:	d6 d2       	rcall	.+1452   	; 0xa54 <__fixunssfsi>
		while(__ticks)
 4a8:	61 15       	cp	r22, r1
 4aa:	71 05       	cpc	r23, r1
 4ac:	a1 f0       	breq	.+40     	; 0x4d6 <pulse_motor+0xc6>
 4ae:	28 ec       	ldi	r18, 0xC8	; 200
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	c9 01       	movw	r24, r18
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	f1 f7       	brne	.-4      	; 0x4b4 <pulse_motor+0xa4>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 4b8:	61 50       	subi	r22, 0x01	; 1
 4ba:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 4bc:	d1 f7       	brne	.-12     	; 0x4b2 <pulse_motor+0xa2>
 4be:	0b c0       	rjmp	.+22     	; 0x4d6 <pulse_motor+0xc6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4c0:	6d 81       	ldd	r22, Y+5	; 0x05
 4c2:	7e 81       	ldd	r23, Y+6	; 0x06
 4c4:	8f 81       	ldd	r24, Y+7	; 0x07
 4c6:	98 85       	ldd	r25, Y+8	; 0x08
 4c8:	c5 d2       	rcall	.+1418   	; 0xa54 <__fixunssfsi>
 4ca:	02 c0       	rjmp	.+4      	; 0x4d0 <pulse_motor+0xc0>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 4cc:	61 e0       	ldi	r22, 0x01	; 1
 4ce:	70 e0       	ldi	r23, 0x00	; 0
 4d0:	cb 01       	movw	r24, r22
 4d2:	01 97       	sbiw	r24, 0x01	; 1
 4d4:	f1 f7       	brne	.-4      	; 0x4d2 <pulse_motor+0xc2>
	for ( uint32_t i = 0; i < number_pulses; i++ )
 4d6:	81 14       	cp	r8, r1
 4d8:	91 04       	cpc	r9, r1
 4da:	a1 04       	cpc	r10, r1
 4dc:	b1 04       	cpc	r11, r1
 4de:	09 f4       	brne	.+2      	; 0x4e2 <pulse_motor+0xd2>
 4e0:	9b c0       	rjmp	.+310    	; 0x618 <pulse_motor+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 4e2:	6d 81       	ldd	r22, Y+5	; 0x05
 4e4:	7e 81       	ldd	r23, Y+6	; 0x06
 4e6:	8f 81       	ldd	r24, Y+7	; 0x07
 4e8:	98 85       	ldd	r25, Y+8	; 0x08
 4ea:	b4 d2       	rcall	.+1384   	; 0xa54 <__fixunssfsi>
 4ec:	6b 01       	movw	r12, r22
 4ee:	7c 01       	movw	r14, r24
 4f0:	20 e0       	ldi	r18, 0x00	; 0
 4f2:	30 e0       	ldi	r19, 0x00	; 0
 4f4:	40 e8       	ldi	r20, 0x80	; 128
 4f6:	5f e3       	ldi	r21, 0x3F	; 63
 4f8:	6d 81       	ldd	r22, Y+5	; 0x05
 4fa:	7e 81       	ldd	r23, Y+6	; 0x06
 4fc:	8f 81       	ldd	r24, Y+7	; 0x07
 4fe:	98 85       	ldd	r25, Y+8	; 0x08
 500:	a0 d2       	rcall	.+1344   	; 0xa42 <__cmpsf2>
 502:	88 23       	and	r24, r24
 504:	1c f4       	brge	.+6      	; 0x50c <pulse_motor+0xfc>
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	02 c0       	rjmp	.+4      	; 0x510 <pulse_motor+0x100>
 50c:	9c 2d       	mov	r25, r12
 50e:	8d 2d       	mov	r24, r13
 510:	09 2f       	mov	r16, r25
 512:	18 2f       	mov	r17, r24
 514:	41 2c       	mov	r4, r1
 516:	51 2c       	mov	r5, r1
 518:	32 01       	movw	r6, r4
 51a:	0f 2e       	mov	r0, r31
 51c:	f8 ec       	ldi	r31, 0xC8	; 200
 51e:	2f 2e       	mov	r2, r31
 520:	31 2c       	mov	r3, r1
 522:	f0 2d       	mov	r31, r0
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 524:	19 bc       	out	0x29, r1	; 41
{
	_delay_ms(pulse_delay);
	for ( uint32_t i = 0; i < number_pulses; i++ )
	{
		set_motor_speed(MAX_SPEED);
		set_motor_direction(BACKWARD);
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	90 e0       	ldi	r25, 0x00	; 0
 52a:	62 df       	rcall	.-316    	; 0x3f0 <set_motor_direction>
		_delay_ms(pulse_length);
 52c:	69 85       	ldd	r22, Y+9	; 0x09
 52e:	7a 85       	ldd	r23, Y+10	; 0x0a
 530:	8b 85       	ldd	r24, Y+11	; 0x0b
 532:	9c 85       	ldd	r25, Y+12	; 0x0c
 534:	bb d2       	rcall	.+1398   	; 0xaac <__floatunsisf>
 536:	69 83       	std	Y+1, r22	; 0x01
 538:	7a 83       	std	Y+2, r23	; 0x02
 53a:	8b 83       	std	Y+3, r24	; 0x03
 53c:	9c 83       	std	Y+4, r25	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
 53e:	20 e0       	ldi	r18, 0x00	; 0
 540:	30 e0       	ldi	r19, 0x00	; 0
 542:	4a ef       	ldi	r20, 0xFA	; 250
 544:	54 e4       	ldi	r21, 0x44	; 68
 546:	40 d3       	rcall	.+1664   	; 0xbc8 <__mulsf3>
 548:	6b 01       	movw	r12, r22
 54a:	7c 01       	movw	r14, r24
	if (__tmp < 1.0)
 54c:	20 e0       	ldi	r18, 0x00	; 0
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	40 e8       	ldi	r20, 0x80	; 128
 552:	5f e3       	ldi	r21, 0x3F	; 63
 554:	76 d2       	rcall	.+1260   	; 0xa42 <__cmpsf2>
 556:	88 23       	and	r24, r24
 558:	0c f1       	brlt	.+66     	; 0x59c <pulse_motor+0x18c>
		__ticks = 1;
	else if (__tmp > 65535)
 55a:	20 e0       	ldi	r18, 0x00	; 0
 55c:	3f ef       	ldi	r19, 0xFF	; 255
 55e:	4f e7       	ldi	r20, 0x7F	; 127
 560:	57 e4       	ldi	r21, 0x47	; 71
 562:	c7 01       	movw	r24, r14
 564:	b6 01       	movw	r22, r12
 566:	2c d3       	rcall	.+1624   	; 0xbc0 <__gesf2>
 568:	18 16       	cp	r1, r24
 56a:	a4 f4       	brge	.+40     	; 0x594 <pulse_motor+0x184>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 56c:	20 e0       	ldi	r18, 0x00	; 0
 56e:	30 e0       	ldi	r19, 0x00	; 0
 570:	40 e2       	ldi	r20, 0x20	; 32
 572:	51 e4       	ldi	r21, 0x41	; 65
 574:	69 81       	ldd	r22, Y+1	; 0x01
 576:	7a 81       	ldd	r23, Y+2	; 0x02
 578:	8b 81       	ldd	r24, Y+3	; 0x03
 57a:	9c 81       	ldd	r25, Y+4	; 0x04
 57c:	25 d3       	rcall	.+1610   	; 0xbc8 <__mulsf3>
 57e:	6a d2       	rcall	.+1236   	; 0xa54 <__fixunssfsi>
		while(__ticks)
 580:	61 15       	cp	r22, r1
 582:	71 05       	cpc	r23, r1
 584:	81 f0       	breq	.+32     	; 0x5a6 <pulse_motor+0x196>
 586:	c1 01       	movw	r24, r2
 588:	01 97       	sbiw	r24, 0x01	; 1
 58a:	f1 f7       	brne	.-4      	; 0x588 <pulse_motor+0x178>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 58c:	61 50       	subi	r22, 0x01	; 1
 58e:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 590:	d1 f7       	brne	.-12     	; 0x586 <pulse_motor+0x176>
 592:	09 c0       	rjmp	.+18     	; 0x5a6 <pulse_motor+0x196>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
 594:	c7 01       	movw	r24, r14
 596:	b6 01       	movw	r22, r12
 598:	5d d2       	rcall	.+1210   	; 0xa54 <__fixunssfsi>
 59a:	02 c0       	rjmp	.+4      	; 0x5a0 <pulse_motor+0x190>

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
		__ticks = 1;
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	70 e0       	ldi	r23, 0x00	; 0
 5a0:	cb 01       	movw	r24, r22
 5a2:	01 97       	sbiw	r24, 0x01	; 1
 5a4:	f1 f7       	brne	.-4      	; 0x5a2 <pulse_motor+0x192>
		set_motor_off();
 5a6:	2f df       	rcall	.-418    	; 0x406 <set_motor_off>
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
	if (__tmp < 1.0)
 5a8:	20 e0       	ldi	r18, 0x00	; 0
 5aa:	30 e0       	ldi	r19, 0x00	; 0
 5ac:	40 e8       	ldi	r20, 0x80	; 128
 5ae:	5f e3       	ldi	r21, 0x3F	; 63
 5b0:	6d 81       	ldd	r22, Y+5	; 0x05
 5b2:	7e 81       	ldd	r23, Y+6	; 0x06
 5b4:	8f 81       	ldd	r24, Y+7	; 0x07
 5b6:	98 85       	ldd	r25, Y+8	; 0x08
 5b8:	44 d2       	rcall	.+1160   	; 0xa42 <__cmpsf2>
 5ba:	88 23       	and	r24, r24
 5bc:	fc f0       	brlt	.+62     	; 0x5fc <pulse_motor+0x1ec>
		__ticks = 1;
	else if (__tmp > 65535)
 5be:	20 e0       	ldi	r18, 0x00	; 0
 5c0:	3f ef       	ldi	r19, 0xFF	; 255
 5c2:	4f e7       	ldi	r20, 0x7F	; 127
 5c4:	57 e4       	ldi	r21, 0x47	; 71
 5c6:	6d 81       	ldd	r22, Y+5	; 0x05
 5c8:	7e 81       	ldd	r23, Y+6	; 0x06
 5ca:	8f 81       	ldd	r24, Y+7	; 0x07
 5cc:	98 85       	ldd	r25, Y+8	; 0x08
 5ce:	f8 d2       	rcall	.+1520   	; 0xbc0 <__gesf2>
 5d0:	18 16       	cp	r1, r24
 5d2:	a4 f4       	brge	.+40     	; 0x5fc <pulse_motor+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
 5d4:	20 e0       	ldi	r18, 0x00	; 0
 5d6:	30 e0       	ldi	r19, 0x00	; 0
 5d8:	40 e2       	ldi	r20, 0x20	; 32
 5da:	51 e4       	ldi	r21, 0x41	; 65
 5dc:	6d 85       	ldd	r22, Y+13	; 0x0d
 5de:	7e 85       	ldd	r23, Y+14	; 0x0e
 5e0:	8f 85       	ldd	r24, Y+15	; 0x0f
 5e2:	98 89       	ldd	r25, Y+16	; 0x10
 5e4:	f1 d2       	rcall	.+1506   	; 0xbc8 <__mulsf3>
 5e6:	36 d2       	rcall	.+1132   	; 0xa54 <__fixunssfsi>
		while(__ticks)
 5e8:	61 15       	cp	r22, r1
 5ea:	71 05       	cpc	r23, r1
 5ec:	51 f0       	breq	.+20     	; 0x602 <pulse_motor+0x1f2>
 5ee:	c1 01       	movw	r24, r2
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <pulse_motor+0x1e0>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 5f4:	61 50       	subi	r22, 0x01	; 1
 5f6:	71 09       	sbc	r23, r1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 5f8:	d1 f7       	brne	.-12     	; 0x5ee <pulse_motor+0x1de>
 5fa:	03 c0       	rjmp	.+6      	; 0x602 <pulse_motor+0x1f2>
 5fc:	c8 01       	movw	r24, r16
 5fe:	01 97       	sbiw	r24, 0x01	; 1
 600:	f1 f7       	brne	.-4      	; 0x5fe <pulse_motor+0x1ee>
}

void pulse_motor( uint32_t number_pulses, uint32_t pulse_length, uint32_t pulse_delay )
{
	_delay_ms(pulse_delay);
	for ( uint32_t i = 0; i < number_pulses; i++ )
 602:	8f ef       	ldi	r24, 0xFF	; 255
 604:	48 1a       	sub	r4, r24
 606:	58 0a       	sbc	r5, r24
 608:	68 0a       	sbc	r6, r24
 60a:	78 0a       	sbc	r7, r24
 60c:	48 14       	cp	r4, r8
 60e:	59 04       	cpc	r5, r9
 610:	6a 04       	cpc	r6, r10
 612:	7b 04       	cpc	r7, r11
 614:	09 f0       	breq	.+2      	; 0x618 <pulse_motor+0x208>
 616:	86 cf       	rjmp	.-244    	; 0x524 <pulse_motor+0x114>
		_delay_ms(pulse_length);
		set_motor_off();
		_delay_ms(pulse_delay);
	}
	
}
 618:	60 96       	adiw	r28, 0x10	; 16
 61a:	0f b6       	in	r0, 0x3f	; 63
 61c:	f8 94       	cli
 61e:	de bf       	out	0x3e, r29	; 62
 620:	0f be       	out	0x3f, r0	; 63
 622:	cd bf       	out	0x3d, r28	; 61
 624:	df 91       	pop	r29
 626:	cf 91       	pop	r28
 628:	1f 91       	pop	r17
 62a:	0f 91       	pop	r16
 62c:	ff 90       	pop	r15
 62e:	ef 90       	pop	r14
 630:	df 90       	pop	r13
 632:	cf 90       	pop	r12
 634:	bf 90       	pop	r11
 636:	af 90       	pop	r10
 638:	9f 90       	pop	r9
 63a:	8f 90       	pop	r8
 63c:	7f 90       	pop	r7
 63e:	6f 90       	pop	r6
 640:	5f 90       	pop	r5
 642:	4f 90       	pop	r4
 644:	3f 90       	pop	r3
 646:	2f 90       	pop	r2
 648:	08 95       	ret

0000064a <get_random>:
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
}

uint32_t get_random( llmod_state* llmod_handle )
{
 64a:	4f 92       	push	r4
 64c:	5f 92       	push	r5
 64e:	6f 92       	push	r6
 650:	7f 92       	push	r7
 652:	8f 92       	push	r8
 654:	9f 92       	push	r9
 656:	af 92       	push	r10
 658:	bf 92       	push	r11
 65a:	cf 92       	push	r12
 65c:	df 92       	push	r13
 65e:	ef 92       	push	r14
 660:	ff 92       	push	r15
 662:	0f 93       	push	r16
 664:	1f 93       	push	r17
 666:	cf 93       	push	r28
 668:	df 93       	push	r29
 66a:	ec 01       	movw	r28, r24
	llmod_handle->m_z = 36969L * (llmod_handle->m_z & 65535L) + (llmod_handle->m_z >> 16);
 66c:	4b 88       	ldd	r4, Y+19	; 0x13
 66e:	5c 88       	ldd	r5, Y+20	; 0x14
 670:	6d 88       	ldd	r6, Y+21	; 0x15
 672:	7e 88       	ldd	r7, Y+22	; 0x16
 674:	c3 01       	movw	r24, r6
 676:	b2 01       	movw	r22, r4
 678:	88 27       	eor	r24, r24
 67a:	99 27       	eor	r25, r25
 67c:	29 e6       	ldi	r18, 0x69	; 105
 67e:	30 e9       	ldi	r19, 0x90	; 144
 680:	40 e0       	ldi	r20, 0x00	; 0
 682:	50 e0       	ldi	r21, 0x00	; 0
 684:	5a d3       	rcall	.+1716   	; 0xd3a <__umulsidi3>
 686:	82 2e       	mov	r8, r18
 688:	93 2e       	mov	r9, r19
 68a:	a4 2e       	mov	r10, r20
 68c:	b5 2e       	mov	r11, r21
 68e:	a3 01       	movw	r20, r6
 690:	66 27       	eor	r22, r22
 692:	77 27       	eor	r23, r23
 694:	48 0d       	add	r20, r8
 696:	59 1d       	adc	r21, r9
 698:	6a 1d       	adc	r22, r10
 69a:	7b 1d       	adc	r23, r11
 69c:	4b 8b       	std	Y+19, r20	; 0x13
 69e:	5c 8b       	std	Y+20, r21	; 0x14
 6a0:	6d 8b       	std	Y+21, r22	; 0x15
 6a2:	7e 8b       	std	Y+22, r23	; 0x16
	llmod_handle->m_w = 18000L * (llmod_handle->m_w & 65535L) + (llmod_handle->m_w >> 16);
 6a4:	cf 84       	ldd	r12, Y+15	; 0x0f
 6a6:	d8 88       	ldd	r13, Y+16	; 0x10
 6a8:	e9 88       	ldd	r14, Y+17	; 0x11
 6aa:	fa 88       	ldd	r15, Y+18	; 0x12
 6ac:	46 01       	movw	r8, r12
 6ae:	57 01       	movw	r10, r14
 6b0:	aa 24       	eor	r10, r10
 6b2:	bb 24       	eor	r11, r11
 6b4:	d5 01       	movw	r26, r10
 6b6:	c4 01       	movw	r24, r8
 6b8:	88 0f       	add	r24, r24
 6ba:	99 1f       	adc	r25, r25
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	aa 1f       	adc	r26, r26
 6c6:	bb 1f       	adc	r27, r27
 6c8:	8c 01       	movw	r16, r24
 6ca:	9d 01       	movw	r18, r26
 6cc:	00 0f       	add	r16, r16
 6ce:	11 1f       	adc	r17, r17
 6d0:	22 1f       	adc	r18, r18
 6d2:	33 1f       	adc	r19, r19
 6d4:	00 0f       	add	r16, r16
 6d6:	11 1f       	adc	r17, r17
 6d8:	22 1f       	adc	r18, r18
 6da:	33 1f       	adc	r19, r19
 6dc:	08 0f       	add	r16, r24
 6de:	19 1f       	adc	r17, r25
 6e0:	2a 1f       	adc	r18, r26
 6e2:	3b 1f       	adc	r19, r27
 6e4:	08 19       	sub	r16, r8
 6e6:	19 09       	sbc	r17, r9
 6e8:	2a 09       	sbc	r18, r10
 6ea:	3b 09       	sbc	r19, r11
 6ec:	00 0f       	add	r16, r16
 6ee:	11 1f       	adc	r17, r17
 6f0:	22 1f       	adc	r18, r18
 6f2:	33 1f       	adc	r19, r19
 6f4:	00 0f       	add	r16, r16
 6f6:	11 1f       	adc	r17, r17
 6f8:	22 1f       	adc	r18, r18
 6fa:	33 1f       	adc	r19, r19
 6fc:	08 19       	sub	r16, r8
 6fe:	19 09       	sbc	r17, r9
 700:	2a 09       	sbc	r18, r10
 702:	3b 09       	sbc	r19, r11
 704:	00 0f       	add	r16, r16
 706:	11 1f       	adc	r17, r17
 708:	22 1f       	adc	r18, r18
 70a:	33 1f       	adc	r19, r19
 70c:	00 0f       	add	r16, r16
 70e:	11 1f       	adc	r17, r17
 710:	22 1f       	adc	r18, r18
 712:	33 1f       	adc	r19, r19
 714:	00 0f       	add	r16, r16
 716:	11 1f       	adc	r17, r17
 718:	22 1f       	adc	r18, r18
 71a:	33 1f       	adc	r19, r19
 71c:	00 0f       	add	r16, r16
 71e:	11 1f       	adc	r17, r17
 720:	22 1f       	adc	r18, r18
 722:	33 1f       	adc	r19, r19
 724:	d9 01       	movw	r26, r18
 726:	c8 01       	movw	r24, r16
 728:	88 0f       	add	r24, r24
 72a:	99 1f       	adc	r25, r25
 72c:	aa 1f       	adc	r26, r26
 72e:	bb 1f       	adc	r27, r27
 730:	88 0f       	add	r24, r24
 732:	99 1f       	adc	r25, r25
 734:	aa 1f       	adc	r26, r26
 736:	bb 1f       	adc	r27, r27
 738:	88 0f       	add	r24, r24
 73a:	99 1f       	adc	r25, r25
 73c:	aa 1f       	adc	r26, r26
 73e:	bb 1f       	adc	r27, r27
 740:	88 0f       	add	r24, r24
 742:	99 1f       	adc	r25, r25
 744:	aa 1f       	adc	r26, r26
 746:	bb 1f       	adc	r27, r27
 748:	80 1b       	sub	r24, r16
 74a:	91 0b       	sbc	r25, r17
 74c:	a2 0b       	sbc	r26, r18
 74e:	b3 0b       	sbc	r27, r19
 750:	67 01       	movw	r12, r14
 752:	ee 24       	eor	r14, r14
 754:	ff 24       	eor	r15, r15
 756:	c8 0e       	add	r12, r24
 758:	d9 1e       	adc	r13, r25
 75a:	ea 1e       	adc	r14, r26
 75c:	fb 1e       	adc	r15, r27
 75e:	cf 86       	std	Y+15, r12	; 0x0f
 760:	d8 8a       	std	Y+16, r13	; 0x10
 762:	e9 8a       	std	Y+17, r14	; 0x11
 764:	fa 8a       	std	Y+18, r15	; 0x12
	return (llmod_handle->m_z << 16) + llmod_handle->m_w;  /* 32-bit result */
 766:	ba 01       	movw	r22, r20
 768:	55 27       	eor	r21, r21
 76a:	44 27       	eor	r20, r20
 76c:	cb 01       	movw	r24, r22
 76e:	ba 01       	movw	r22, r20
 770:	6c 0d       	add	r22, r12
 772:	7d 1d       	adc	r23, r13
 774:	8e 1d       	adc	r24, r14
 776:	9f 1d       	adc	r25, r15
}
 778:	df 91       	pop	r29
 77a:	cf 91       	pop	r28
 77c:	1f 91       	pop	r17
 77e:	0f 91       	pop	r16
 780:	ff 90       	pop	r15
 782:	ef 90       	pop	r14
 784:	df 90       	pop	r13
 786:	cf 90       	pop	r12
 788:	bf 90       	pop	r11
 78a:	af 90       	pop	r10
 78c:	9f 90       	pop	r9
 78e:	8f 90       	pop	r8
 790:	7f 90       	pop	r7
 792:	6f 90       	pop	r6
 794:	5f 90       	pop	r5
 796:	4f 90       	pop	r4
 798:	08 95       	ret

0000079a <run_llmod_statemachine>:
	{250,250},{251,251},{252,252},{253,253},{254,254},{255,255}
};


void run_llmod_statemachine( llmod_state* llmod_handle )
{
 79a:	cf 92       	push	r12
 79c:	df 92       	push	r13
 79e:	ef 92       	push	r14
 7a0:	ff 92       	push	r15
 7a2:	0f 93       	push	r16
 7a4:	1f 93       	push	r17
 7a6:	cf 93       	push	r28
 7a8:	df 93       	push	r29
 7aa:	ec 01       	movw	r28, r24
	uint32_t current_time;
	current_time = millis();
 7ac:	3c d1       	rcall	.+632    	; 0xa26 <millis>
	
	switch ( llmod_handle->current_mode )
 7ae:	28 81       	ld	r18, Y
 7b0:	39 81       	ldd	r19, Y+1	; 0x01
 7b2:	23 30       	cpi	r18, 0x03	; 3
 7b4:	31 05       	cpc	r19, r1
 7b6:	f1 f0       	breq	.+60     	; 0x7f4 <run_llmod_statemachine+0x5a>
 7b8:	38 f4       	brcc	.+14     	; 0x7c8 <run_llmod_statemachine+0x2e>
 7ba:	21 30       	cpi	r18, 0x01	; 1
 7bc:	31 05       	cpc	r19, r1
 7be:	79 f0       	breq	.+30     	; 0x7de <run_llmod_statemachine+0x44>
 7c0:	22 30       	cpi	r18, 0x02	; 2
 7c2:	31 05       	cpc	r19, r1
 7c4:	91 f0       	breq	.+36     	; 0x7ea <run_llmod_statemachine+0x50>
 7c6:	09 c0       	rjmp	.+18     	; 0x7da <run_llmod_statemachine+0x40>
 7c8:	25 30       	cpi	r18, 0x05	; 5
 7ca:	31 05       	cpc	r19, r1
 7cc:	09 f4       	brne	.+2      	; 0x7d0 <run_llmod_statemachine+0x36>
 7ce:	52 c0       	rjmp	.+164    	; 0x874 <run_llmod_statemachine+0xda>
 7d0:	b8 f0       	brcs	.+46     	; 0x800 <run_llmod_statemachine+0x66>
 7d2:	26 30       	cpi	r18, 0x06	; 6
 7d4:	31 05       	cpc	r19, r1
 7d6:	09 f4       	brne	.+2      	; 0x7da <run_llmod_statemachine+0x40>
 7d8:	4f c0       	rjmp	.+158    	; 0x878 <run_llmod_statemachine+0xde>
	{
		default:
		case MODE_IDLE:
		//In idle mode the motor is off:
		set_motor_off();
 7da:	15 de       	rcall	.-982    	; 0x406 <set_motor_off>
		break;
 7dc:	4e c0       	rjmp	.+156    	; 0x87a <run_llmod_statemachine+0xe0>
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 7de:	84 e6       	ldi	r24, 0x64	; 100
 7e0:	89 bd       	out	0x29, r24	; 41
		break;
		
		case MODE_NORMAL_FWD:
		//TODO: FIX DIRECTION WITH NEW MOTOR DRIVER!
		set_motor_speed(NORMAL_SPEED);
		set_motor_direction(FORWARD);
 7e2:	80 e0       	ldi	r24, 0x00	; 0
 7e4:	90 e0       	ldi	r25, 0x00	; 0
 7e6:	04 de       	rcall	.-1016   	; 0x3f0 <set_motor_direction>
		break;
 7e8:	48 c0       	rjmp	.+144    	; 0x87a <run_llmod_statemachine+0xe0>
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 7ea:	19 bc       	out	0x29, r1	; 41
		set_motor_direction(FORWARD);
		break;
		
		case MODE_MAX_FWD:
		set_motor_speed(MAX_SPEED);
		set_motor_direction(FORWARD);
 7ec:	80 e0       	ldi	r24, 0x00	; 0
 7ee:	90 e0       	ldi	r25, 0x00	; 0
 7f0:	ff dd       	rcall	.-1026   	; 0x3f0 <set_motor_direction>
		break;
 7f2:	43 c0       	rjmp	.+134    	; 0x87a <run_llmod_statemachine+0xe0>
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 7f4:	84 e6       	ldi	r24, 0x64	; 100
 7f6:	89 bd       	out	0x29, r24	; 41
		set_motor_direction(FORWARD);
		break;
		
		case MODE_NORMAL_REV:
		set_motor_speed(NORMAL_SPEED);
		set_motor_direction(BACKWARD);
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	90 e0       	ldi	r25, 0x00	; 0
 7fc:	f9 dd       	rcall	.-1038   	; 0x3f0 <set_motor_direction>
		break;
 7fe:	3d c0       	rjmp	.+122    	; 0x87a <run_llmod_statemachine+0xe0>
		
		//TODO: Add random modes!
		case MODE_RND_FWD:
		{
			if ( current_time - llmod_handle->last_rnd_change_time > llmod_handle->event_timer )
 800:	0f 81       	ldd	r16, Y+7	; 0x07
 802:	18 85       	ldd	r17, Y+8	; 0x08
 804:	29 85       	ldd	r18, Y+9	; 0x09
 806:	3a 85       	ldd	r19, Y+10	; 0x0a
 808:	6b 01       	movw	r12, r22
 80a:	7c 01       	movw	r14, r24
 80c:	c0 1a       	sub	r12, r16
 80e:	d1 0a       	sbc	r13, r17
 810:	e2 0a       	sbc	r14, r18
 812:	f3 0a       	sbc	r15, r19
 814:	0b 85       	ldd	r16, Y+11	; 0x0b
 816:	1c 85       	ldd	r17, Y+12	; 0x0c
 818:	2d 85       	ldd	r18, Y+13	; 0x0d
 81a:	3e 85       	ldd	r19, Y+14	; 0x0e
 81c:	0c 15       	cp	r16, r12
 81e:	1d 05       	cpc	r17, r13
 820:	2e 05       	cpc	r18, r14
 822:	3f 05       	cpc	r19, r15
 824:	50 f5       	brcc	.+84     	; 0x87a <run_llmod_statemachine+0xe0>
			{
				llmod_handle->last_rnd_change_time = current_time;
 826:	6f 83       	std	Y+7, r22	; 0x07
 828:	78 87       	std	Y+8, r23	; 0x08
 82a:	89 87       	std	Y+9, r24	; 0x09
 82c:	9a 87       	std	Y+10, r25	; 0x0a
				set_motor_speed( scale_and_offset( 256 , 128, get_random( llmod_handle ) ) );
 82e:	ce 01       	movw	r24, r28
 830:	0c df       	rcall	.-488    	; 0x64a <get_random>
		return 1;
}

int32_t scale_and_offset( uint32_t scale, uint32_t offset, uint32_t input )
{
	return( (input % scale) + offset);
 832:	dc 01       	movw	r26, r24
 834:	cb 01       	movw	r24, r22
 836:	99 27       	eor	r25, r25
 838:	aa 27       	eor	r26, r26
 83a:	bb 27       	eor	r27, r27
 83c:	80 58       	subi	r24, 0x80	; 128
 83e:	9f 4f       	sbci	r25, 0xFF	; 255
 840:	af 4f       	sbci	r26, 0xFF	; 255
 842:	bf 4f       	sbci	r27, 0xFF	; 255
}

void set_motor_speed( uint8_t speed )
{
	if ( speed <= 0xFF )
	OCR0A = 0xFF - speed;
 844:	68 2f       	mov	r22, r24
 846:	60 95       	com	r22
 848:	69 bd       	out	0x29, r22	; 41
		{
			if ( current_time - llmod_handle->last_rnd_change_time > llmod_handle->event_timer )
			{
				llmod_handle->last_rnd_change_time = current_time;
				set_motor_speed( scale_and_offset( 256 , 128, get_random( llmod_handle ) ) );
				set_motor_direction(FORWARD);
 84a:	80 e0       	ldi	r24, 0x00	; 0
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	d0 dd       	rcall	.-1120   	; 0x3f0 <set_motor_direction>
				llmod_handle->event_timer = scale_and_offset( 5000 , 1000, get_random( llmod_handle ) );
 850:	ce 01       	movw	r24, r28
 852:	fb de       	rcall	.-522    	; 0x64a <get_random>
		return 1;
}

int32_t scale_and_offset( uint32_t scale, uint32_t offset, uint32_t input )
{
	return( (input % scale) + offset);
 854:	28 e8       	ldi	r18, 0x88	; 136
 856:	33 e1       	ldi	r19, 0x13	; 19
 858:	40 e0       	ldi	r20, 0x00	; 0
 85a:	50 e0       	ldi	r21, 0x00	; 0
 85c:	4a d2       	rcall	.+1172   	; 0xcf2 <__udivmodsi4>
 85e:	dc 01       	movw	r26, r24
 860:	cb 01       	movw	r24, r22
 862:	88 51       	subi	r24, 0x18	; 24
 864:	9c 4f       	sbci	r25, 0xFC	; 252
 866:	af 4f       	sbci	r26, 0xFF	; 255
 868:	bf 4f       	sbci	r27, 0xFF	; 255
			if ( current_time - llmod_handle->last_rnd_change_time > llmod_handle->event_timer )
			{
				llmod_handle->last_rnd_change_time = current_time;
				set_motor_speed( scale_and_offset( 256 , 128, get_random( llmod_handle ) ) );
				set_motor_direction(FORWARD);
				llmod_handle->event_timer = scale_and_offset( 5000 , 1000, get_random( llmod_handle ) );
 86a:	8b 87       	std	Y+11, r24	; 0x0b
 86c:	9c 87       	std	Y+12, r25	; 0x0c
 86e:	ad 87       	std	Y+13, r26	; 0x0d
 870:	be 87       	std	Y+14, r27	; 0x0e
 872:	03 c0       	rjmp	.+6      	; 0x87a <run_llmod_statemachine+0xe0>
			}
		}
		break;
		
		case MODE_RND_SNG_FWD:
		set_motor_off();
 874:	c8 dd       	rcall	.-1136   	; 0x406 <set_motor_off>
		break;
 876:	01 c0       	rjmp	.+2      	; 0x87a <run_llmod_statemachine+0xe0>
		
		case MODE_RND_SNG_FWD_REV:
		set_motor_off();
 878:	c6 dd       	rcall	.-1140   	; 0x406 <set_motor_off>
		break;
	}
}
 87a:	df 91       	pop	r29
 87c:	cf 91       	pop	r28
 87e:	1f 91       	pop	r17
 880:	0f 91       	pop	r16
 882:	ff 90       	pop	r15
 884:	ef 90       	pop	r14
 886:	df 90       	pop	r13
 888:	cf 90       	pop	r12
 88a:	08 95       	ret

0000088c <sys_init>:
}

void sys_init()
{
	//Disable global Interrupts
	cli();
 88c:	f8 94       	cli
	
	//Set clock prescaler to 1 (8MHz)
	CLKPR = 1<<CLKPCE;
 88e:	80 e8       	ldi	r24, 0x80	; 128
 890:	86 bd       	out	0x26, r24	; 38
	CLKPR = 0;
 892:	16 bc       	out	0x26, r1	; 38
	
	//Enable PLL, wait for it to achieve lock and then enable the clock for Timer/Counter 1:
	PLLCSR = (1 << PLLE);
 894:	82 e0       	ldi	r24, 0x02	; 2
 896:	87 bd       	out	0x27, r24	; 39
	while ( (PLLCSR & (1<<PLOCK)) == 0 );
 898:	07 b4       	in	r0, 0x27	; 39
 89a:	00 fe       	sbrs	r0, 0
 89c:	fd cf       	rjmp	.-6      	; 0x898 <sys_init+0xc>
	PLLCSR |= (1 << PCKE);
 89e:	87 b5       	in	r24, 0x27	; 39
 8a0:	84 60       	ori	r24, 0x04	; 4
 8a2:	87 bd       	out	0x27, r24	; 39

	//Configure Ports PB0, PB3 and PB4 as output for motor control:
	DDRB |= (1<<DDB0) | (1<<DDB3) | (1<<DDB4);
 8a4:	87 b3       	in	r24, 0x17	; 23
 8a6:	89 61       	ori	r24, 0x19	; 25
 8a8:	87 bb       	out	0x17, r24	; 23
	
	//1ms CTC interrupt:
	TCCR1 = (1<<CTC1)|(5<<CS10);   // CTC  mode
 8aa:	85 e8       	ldi	r24, 0x85	; 133
 8ac:	80 bf       	out	0x30, r24	; 48
	OCR1C = 39;  // 10µs
 8ae:	87 e2       	ldi	r24, 0x27	; 39
 8b0:	8d bd       	out	0x2d, r24	; 45
	TIMSK |= (1<<OCIE1A);
 8b2:	89 b7       	in	r24, 0x39	; 57
 8b4:	80 64       	ori	r24, 0x40	; 64
 8b6:	89 bf       	out	0x39, r24	; 57
	
	sei();
 8b8:	78 94       	sei
	
	//PWM for speed setting:
	TCCR0A = 3<<COM0A0 | 3<<WGM00;
 8ba:	83 ec       	ldi	r24, 0xC3	; 195
 8bc:	8a bd       	out	0x2a, r24	; 42
	TCCR0B = 0<<WGM02 | 2<<CS00;
 8be:	82 e0       	ldi	r24, 0x02	; 2
 8c0:	83 bf       	out	0x33, r24	; 51
 8c2:	08 95       	ret

000008c4 <main>:
uint32_t last_time_sense = 0;
uint32_t last_time_switch = 0;

int main(void)
{
	sys_init();
 8c4:	e3 df       	rcall	.-58     	; 0x88c <sys_init>

	init_llmod( &llmod );
 8c6:	89 e8       	ldi	r24, 0x89	; 137
 8c8:	90 e0       	ldi	r25, 0x00	; 0
 8ca:	7b dd       	rcall	.-1290   	; 0x3c2 <init_llmod>
	init_capsense( &capsense );
 8cc:	84 e7       	ldi	r24, 0x74	; 116
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	c2 db       	rcall	.-2172   	; 0x56 <init_capsense>
				//Switch was pressed, has enough time passed to change the mode?
				current_time = millis();
				if (( current_time - last_time_switch) > MODE_SWITCH_TIME)
				{
					last_time_switch = current_time;
					llmod.current_mode++;
 8d2:	c9 e8       	ldi	r28, 0x89	; 137
 8d4:	d0 e0       	ldi	r29, 0x00	; 0
		}
	}
#else
	while (1)
	{
		current_time = millis();
 8d6:	a7 d0       	rcall	.+334    	; 0xa26 <millis>
 8d8:	60 93 6a 00 	sts	0x006A, r22
 8dc:	70 93 6b 00 	sts	0x006B, r23
 8e0:	80 93 6c 00 	sts	0x006C, r24
 8e4:	90 93 6d 00 	sts	0x006D, r25
		if ( (current_time - last_time_sense) > SENSE_INTERVAL )
 8e8:	00 91 66 00 	lds	r16, 0x0066
 8ec:	10 91 67 00 	lds	r17, 0x0067
 8f0:	20 91 68 00 	lds	r18, 0x0068
 8f4:	30 91 69 00 	lds	r19, 0x0069
 8f8:	6b 01       	movw	r12, r22
 8fa:	7c 01       	movw	r14, r24
 8fc:	c0 1a       	sub	r12, r16
 8fe:	d1 0a       	sbc	r13, r17
 900:	e2 0a       	sbc	r14, r18
 902:	f3 0a       	sbc	r15, r19
 904:	97 01       	movw	r18, r14
 906:	86 01       	movw	r16, r12
 908:	0b 30       	cpi	r16, 0x0B	; 11
 90a:	11 05       	cpc	r17, r1
 90c:	21 05       	cpc	r18, r1
 90e:	31 05       	cpc	r19, r1
 910:	08 f4       	brcc	.+2      	; 0x914 <main+0x50>
 912:	4b c0       	rjmp	.+150    	; 0x9aa <main+0xe6>
		{
			last_time_sense = current_time;
 914:	60 93 66 00 	sts	0x0066, r22
 918:	70 93 67 00 	sts	0x0067, r23
 91c:	80 93 68 00 	sts	0x0068, r24
 920:	90 93 69 00 	sts	0x0069, r25
			if ( debounce_capsense() == 1 )
 924:	36 dd       	rcall	.-1428   	; 0x392 <debounce_capsense>
 926:	81 30       	cpi	r24, 0x01	; 1
 928:	09 f0       	breq	.+2      	; 0x92c <main+0x68>
 92a:	3f c0       	rjmp	.+126    	; 0x9aa <main+0xe6>
			{
				//Switch was pressed, has enough time passed to change the mode?
				current_time = millis();
 92c:	7c d0       	rcall	.+248    	; 0xa26 <millis>
 92e:	60 93 6a 00 	sts	0x006A, r22
 932:	70 93 6b 00 	sts	0x006B, r23
 936:	80 93 6c 00 	sts	0x006C, r24
 93a:	90 93 6d 00 	sts	0x006D, r25
				if (( current_time - last_time_switch) > MODE_SWITCH_TIME)
 93e:	00 91 62 00 	lds	r16, 0x0062
 942:	10 91 63 00 	lds	r17, 0x0063
 946:	20 91 64 00 	lds	r18, 0x0064
 94a:	30 91 65 00 	lds	r19, 0x0065
 94e:	6b 01       	movw	r12, r22
 950:	7c 01       	movw	r14, r24
 952:	c0 1a       	sub	r12, r16
 954:	d1 0a       	sbc	r13, r17
 956:	e2 0a       	sbc	r14, r18
 958:	f3 0a       	sbc	r15, r19
 95a:	97 01       	movw	r18, r14
 95c:	86 01       	movw	r16, r12
 95e:	0b 3f       	cpi	r16, 0xFB	; 251
 960:	11 05       	cpc	r17, r1
 962:	21 05       	cpc	r18, r1
 964:	31 05       	cpc	r19, r1
 966:	08 f1       	brcs	.+66     	; 0x9aa <main+0xe6>
				{
					last_time_switch = current_time;
 968:	60 93 62 00 	sts	0x0062, r22
 96c:	70 93 63 00 	sts	0x0063, r23
 970:	80 93 64 00 	sts	0x0064, r24
 974:	90 93 65 00 	sts	0x0065, r25
					llmod.current_mode++;
 978:	88 81       	ld	r24, Y
 97a:	99 81       	ldd	r25, Y+1	; 0x01
 97c:	01 96       	adiw	r24, 0x01	; 1
					if ( llmod.current_mode > MAX_MODES )
 97e:	87 30       	cpi	r24, 0x07	; 7
 980:	91 05       	cpc	r25, r1
 982:	18 f4       	brcc	.+6      	; 0x98a <main+0xc6>
				//Switch was pressed, has enough time passed to change the mode?
				current_time = millis();
				if (( current_time - last_time_switch) > MODE_SWITCH_TIME)
				{
					last_time_switch = current_time;
					llmod.current_mode++;
 984:	99 83       	std	Y+1, r25	; 0x01
 986:	88 83       	st	Y, r24
 988:	02 c0       	rjmp	.+4      	; 0x98e <main+0xca>
					if ( llmod.current_mode > MAX_MODES )
						llmod.current_mode = 0;
 98a:	19 82       	std	Y+1, r1	; 0x01
 98c:	18 82       	st	Y, r1
					if ( (llmod.current_mode == MODE_RND_FWD) && (llmod.current_mode == MODE_RND_SNG_FWD) && (llmod.current_mode == MODE_RND_SNG_FWD_REV) )
					{
						//Seed the PRNG with the current system time:
						seed_random( &llmod, millis() );
					}
					pulse_motor( llmod.current_mode, 100, 50 );
 98e:	68 81       	ld	r22, Y
 990:	79 81       	ldd	r23, Y+1	; 0x01
 992:	80 e0       	ldi	r24, 0x00	; 0
 994:	90 e0       	ldi	r25, 0x00	; 0
 996:	12 e3       	ldi	r17, 0x32	; 50
 998:	e1 2e       	mov	r14, r17
 99a:	f1 2c       	mov	r15, r1
 99c:	00 e0       	ldi	r16, 0x00	; 0
 99e:	10 e0       	ldi	r17, 0x00	; 0
 9a0:	24 e6       	ldi	r18, 0x64	; 100
 9a2:	30 e0       	ldi	r19, 0x00	; 0
 9a4:	40 e0       	ldi	r20, 0x00	; 0
 9a6:	50 e0       	ldi	r21, 0x00	; 0
 9a8:	33 dd       	rcall	.-1434   	; 0x410 <pulse_motor>
				}
			}
		}
		run_llmod_statemachine( &llmod );
 9aa:	ce 01       	movw	r24, r28
 9ac:	f6 de       	rcall	.-532    	; 0x79a <run_llmod_statemachine>
	}
 9ae:	93 cf       	rjmp	.-218    	; 0x8d6 <main+0x12>

000009b0 <__vector_3>:

static volatile uint32_t milliseconds = 0;
static volatile uint16_t microseconds = 0;

ISR(TIMER1_COMPA_vect)
{
 9b0:	1f 92       	push	r1
 9b2:	0f 92       	push	r0
 9b4:	0f b6       	in	r0, 0x3f	; 63
 9b6:	0f 92       	push	r0
 9b8:	11 24       	eor	r1, r1
 9ba:	2f 93       	push	r18
 9bc:	8f 93       	push	r24
 9be:	9f 93       	push	r25
 9c0:	af 93       	push	r26
 9c2:	bf 93       	push	r27
	microseconds += 10;
 9c4:	80 91 6e 00 	lds	r24, 0x006E
 9c8:	90 91 6f 00 	lds	r25, 0x006F
 9cc:	0a 96       	adiw	r24, 0x0a	; 10
 9ce:	90 93 6f 00 	sts	0x006F, r25
 9d2:	80 93 6e 00 	sts	0x006E, r24
	if ( microseconds == 1000 )
 9d6:	80 91 6e 00 	lds	r24, 0x006E
 9da:	90 91 6f 00 	lds	r25, 0x006F
 9de:	88 3e       	cpi	r24, 0xE8	; 232
 9e0:	93 40       	sbci	r25, 0x03	; 3
 9e2:	b9 f4       	brne	.+46     	; 0xa12 <__vector_3+0x62>
	{
		microseconds = 0;
 9e4:	10 92 6f 00 	sts	0x006F, r1
 9e8:	10 92 6e 00 	sts	0x006E, r1
		milliseconds++;
 9ec:	80 91 70 00 	lds	r24, 0x0070
 9f0:	90 91 71 00 	lds	r25, 0x0071
 9f4:	a0 91 72 00 	lds	r26, 0x0072
 9f8:	b0 91 73 00 	lds	r27, 0x0073
 9fc:	01 96       	adiw	r24, 0x01	; 1
 9fe:	a1 1d       	adc	r26, r1
 a00:	b1 1d       	adc	r27, r1
 a02:	80 93 70 00 	sts	0x0070, r24
 a06:	90 93 71 00 	sts	0x0071, r25
 a0a:	a0 93 72 00 	sts	0x0072, r26
 a0e:	b0 93 73 00 	sts	0x0073, r27
	}
}
 a12:	bf 91       	pop	r27
 a14:	af 91       	pop	r26
 a16:	9f 91       	pop	r25
 a18:	8f 91       	pop	r24
 a1a:	2f 91       	pop	r18
 a1c:	0f 90       	pop	r0
 a1e:	0f be       	out	0x3f, r0	; 63
 a20:	0f 90       	pop	r0
 a22:	1f 90       	pop	r1
 a24:	18 95       	reti

00000a26 <millis>:

uint32_t millis()
{
	return milliseconds;
 a26:	60 91 70 00 	lds	r22, 0x0070
 a2a:	70 91 71 00 	lds	r23, 0x0071
 a2e:	80 91 72 00 	lds	r24, 0x0072
 a32:	90 91 73 00 	lds	r25, 0x0073
}
 a36:	08 95       	ret

00000a38 <micros>:

uint16_t micros()
{
	return microseconds;
 a38:	80 91 6e 00 	lds	r24, 0x006E
 a3c:	90 91 6f 00 	lds	r25, 0x006F
 a40:	08 95       	ret

00000a42 <__cmpsf2>:
 a42:	71 d0       	rcall	.+226    	; 0xb26 <__fp_cmp>
 a44:	08 f4       	brcc	.+2      	; 0xa48 <__cmpsf2+0x6>
 a46:	81 e0       	ldi	r24, 0x01	; 1
 a48:	08 95       	ret

00000a4a <__fixsfsi>:
 a4a:	04 d0       	rcall	.+8      	; 0xa54 <__fixunssfsi>
 a4c:	68 94       	set
 a4e:	b1 11       	cpse	r27, r1
 a50:	b1 c0       	rjmp	.+354    	; 0xbb4 <__fp_szero>
 a52:	08 95       	ret

00000a54 <__fixunssfsi>:
 a54:	94 d0       	rcall	.+296    	; 0xb7e <__fp_splitA>
 a56:	88 f0       	brcs	.+34     	; 0xa7a <__fixunssfsi+0x26>
 a58:	9f 57       	subi	r25, 0x7F	; 127
 a5a:	90 f0       	brcs	.+36     	; 0xa80 <__fixunssfsi+0x2c>
 a5c:	b9 2f       	mov	r27, r25
 a5e:	99 27       	eor	r25, r25
 a60:	b7 51       	subi	r27, 0x17	; 23
 a62:	a0 f0       	brcs	.+40     	; 0xa8c <__fixunssfsi+0x38>
 a64:	d1 f0       	breq	.+52     	; 0xa9a <__fixunssfsi+0x46>
 a66:	66 0f       	add	r22, r22
 a68:	77 1f       	adc	r23, r23
 a6a:	88 1f       	adc	r24, r24
 a6c:	99 1f       	adc	r25, r25
 a6e:	1a f0       	brmi	.+6      	; 0xa76 <__fixunssfsi+0x22>
 a70:	ba 95       	dec	r27
 a72:	c9 f7       	brne	.-14     	; 0xa66 <__fixunssfsi+0x12>
 a74:	12 c0       	rjmp	.+36     	; 0xa9a <__fixunssfsi+0x46>
 a76:	b1 30       	cpi	r27, 0x01	; 1
 a78:	81 f0       	breq	.+32     	; 0xa9a <__fixunssfsi+0x46>
 a7a:	9b d0       	rcall	.+310    	; 0xbb2 <__fp_zero>
 a7c:	b1 e0       	ldi	r27, 0x01	; 1
 a7e:	08 95       	ret
 a80:	98 c0       	rjmp	.+304    	; 0xbb2 <__fp_zero>
 a82:	67 2f       	mov	r22, r23
 a84:	78 2f       	mov	r23, r24
 a86:	88 27       	eor	r24, r24
 a88:	b8 5f       	subi	r27, 0xF8	; 248
 a8a:	39 f0       	breq	.+14     	; 0xa9a <__fixunssfsi+0x46>
 a8c:	b9 3f       	cpi	r27, 0xF9	; 249
 a8e:	cc f3       	brlt	.-14     	; 0xa82 <__fixunssfsi+0x2e>
 a90:	86 95       	lsr	r24
 a92:	77 95       	ror	r23
 a94:	67 95       	ror	r22
 a96:	b3 95       	inc	r27
 a98:	d9 f7       	brne	.-10     	; 0xa90 <__fixunssfsi+0x3c>
 a9a:	3e f4       	brtc	.+14     	; 0xaaa <__fixunssfsi+0x56>
 a9c:	90 95       	com	r25
 a9e:	80 95       	com	r24
 aa0:	70 95       	com	r23
 aa2:	61 95       	neg	r22
 aa4:	7f 4f       	sbci	r23, 0xFF	; 255
 aa6:	8f 4f       	sbci	r24, 0xFF	; 255
 aa8:	9f 4f       	sbci	r25, 0xFF	; 255
 aaa:	08 95       	ret

00000aac <__floatunsisf>:
 aac:	e8 94       	clt
 aae:	09 c0       	rjmp	.+18     	; 0xac2 <__floatsisf+0x12>

00000ab0 <__floatsisf>:
 ab0:	97 fb       	bst	r25, 7
 ab2:	3e f4       	brtc	.+14     	; 0xac2 <__floatsisf+0x12>
 ab4:	90 95       	com	r25
 ab6:	80 95       	com	r24
 ab8:	70 95       	com	r23
 aba:	61 95       	neg	r22
 abc:	7f 4f       	sbci	r23, 0xFF	; 255
 abe:	8f 4f       	sbci	r24, 0xFF	; 255
 ac0:	9f 4f       	sbci	r25, 0xFF	; 255
 ac2:	99 23       	and	r25, r25
 ac4:	a9 f0       	breq	.+42     	; 0xaf0 <__floatsisf+0x40>
 ac6:	f9 2f       	mov	r31, r25
 ac8:	96 e9       	ldi	r25, 0x96	; 150
 aca:	bb 27       	eor	r27, r27
 acc:	93 95       	inc	r25
 ace:	f6 95       	lsr	r31
 ad0:	87 95       	ror	r24
 ad2:	77 95       	ror	r23
 ad4:	67 95       	ror	r22
 ad6:	b7 95       	ror	r27
 ad8:	f1 11       	cpse	r31, r1
 ada:	f8 cf       	rjmp	.-16     	; 0xacc <__floatsisf+0x1c>
 adc:	fa f4       	brpl	.+62     	; 0xb1c <__floatsisf+0x6c>
 ade:	bb 0f       	add	r27, r27
 ae0:	11 f4       	brne	.+4      	; 0xae6 <__floatsisf+0x36>
 ae2:	60 ff       	sbrs	r22, 0
 ae4:	1b c0       	rjmp	.+54     	; 0xb1c <__floatsisf+0x6c>
 ae6:	6f 5f       	subi	r22, 0xFF	; 255
 ae8:	7f 4f       	sbci	r23, 0xFF	; 255
 aea:	8f 4f       	sbci	r24, 0xFF	; 255
 aec:	9f 4f       	sbci	r25, 0xFF	; 255
 aee:	16 c0       	rjmp	.+44     	; 0xb1c <__floatsisf+0x6c>
 af0:	88 23       	and	r24, r24
 af2:	11 f0       	breq	.+4      	; 0xaf8 <__floatsisf+0x48>
 af4:	96 e9       	ldi	r25, 0x96	; 150
 af6:	11 c0       	rjmp	.+34     	; 0xb1a <__floatsisf+0x6a>
 af8:	77 23       	and	r23, r23
 afa:	21 f0       	breq	.+8      	; 0xb04 <__floatsisf+0x54>
 afc:	9e e8       	ldi	r25, 0x8E	; 142
 afe:	87 2f       	mov	r24, r23
 b00:	76 2f       	mov	r23, r22
 b02:	05 c0       	rjmp	.+10     	; 0xb0e <__floatsisf+0x5e>
 b04:	66 23       	and	r22, r22
 b06:	71 f0       	breq	.+28     	; 0xb24 <__floatsisf+0x74>
 b08:	96 e8       	ldi	r25, 0x86	; 134
 b0a:	86 2f       	mov	r24, r22
 b0c:	70 e0       	ldi	r23, 0x00	; 0
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	2a f0       	brmi	.+10     	; 0xb1c <__floatsisf+0x6c>
 b12:	9a 95       	dec	r25
 b14:	66 0f       	add	r22, r22
 b16:	77 1f       	adc	r23, r23
 b18:	88 1f       	adc	r24, r24
 b1a:	da f7       	brpl	.-10     	; 0xb12 <__floatsisf+0x62>
 b1c:	88 0f       	add	r24, r24
 b1e:	96 95       	lsr	r25
 b20:	87 95       	ror	r24
 b22:	97 f9       	bld	r25, 7
 b24:	08 95       	ret

00000b26 <__fp_cmp>:
 b26:	99 0f       	add	r25, r25
 b28:	00 08       	sbc	r0, r0
 b2a:	55 0f       	add	r21, r21
 b2c:	aa 0b       	sbc	r26, r26
 b2e:	e0 e8       	ldi	r30, 0x80	; 128
 b30:	fe ef       	ldi	r31, 0xFE	; 254
 b32:	16 16       	cp	r1, r22
 b34:	17 06       	cpc	r1, r23
 b36:	e8 07       	cpc	r30, r24
 b38:	f9 07       	cpc	r31, r25
 b3a:	c0 f0       	brcs	.+48     	; 0xb6c <__fp_cmp+0x46>
 b3c:	12 16       	cp	r1, r18
 b3e:	13 06       	cpc	r1, r19
 b40:	e4 07       	cpc	r30, r20
 b42:	f5 07       	cpc	r31, r21
 b44:	98 f0       	brcs	.+38     	; 0xb6c <__fp_cmp+0x46>
 b46:	62 1b       	sub	r22, r18
 b48:	73 0b       	sbc	r23, r19
 b4a:	84 0b       	sbc	r24, r20
 b4c:	95 0b       	sbc	r25, r21
 b4e:	39 f4       	brne	.+14     	; 0xb5e <__fp_cmp+0x38>
 b50:	0a 26       	eor	r0, r26
 b52:	61 f0       	breq	.+24     	; 0xb6c <__fp_cmp+0x46>
 b54:	23 2b       	or	r18, r19
 b56:	24 2b       	or	r18, r20
 b58:	25 2b       	or	r18, r21
 b5a:	21 f4       	brne	.+8      	; 0xb64 <__fp_cmp+0x3e>
 b5c:	08 95       	ret
 b5e:	0a 26       	eor	r0, r26
 b60:	09 f4       	brne	.+2      	; 0xb64 <__fp_cmp+0x3e>
 b62:	a1 40       	sbci	r26, 0x01	; 1
 b64:	a6 95       	lsr	r26
 b66:	8f ef       	ldi	r24, 0xFF	; 255
 b68:	81 1d       	adc	r24, r1
 b6a:	81 1d       	adc	r24, r1
 b6c:	08 95       	ret

00000b6e <__fp_split3>:
 b6e:	57 fd       	sbrc	r21, 7
 b70:	90 58       	subi	r25, 0x80	; 128
 b72:	44 0f       	add	r20, r20
 b74:	55 1f       	adc	r21, r21
 b76:	59 f0       	breq	.+22     	; 0xb8e <__fp_splitA+0x10>
 b78:	5f 3f       	cpi	r21, 0xFF	; 255
 b7a:	71 f0       	breq	.+28     	; 0xb98 <__fp_splitA+0x1a>
 b7c:	47 95       	ror	r20

00000b7e <__fp_splitA>:
 b7e:	88 0f       	add	r24, r24
 b80:	97 fb       	bst	r25, 7
 b82:	99 1f       	adc	r25, r25
 b84:	61 f0       	breq	.+24     	; 0xb9e <__fp_splitA+0x20>
 b86:	9f 3f       	cpi	r25, 0xFF	; 255
 b88:	79 f0       	breq	.+30     	; 0xba8 <__fp_splitA+0x2a>
 b8a:	87 95       	ror	r24
 b8c:	08 95       	ret
 b8e:	12 16       	cp	r1, r18
 b90:	13 06       	cpc	r1, r19
 b92:	14 06       	cpc	r1, r20
 b94:	55 1f       	adc	r21, r21
 b96:	f2 cf       	rjmp	.-28     	; 0xb7c <__fp_split3+0xe>
 b98:	46 95       	lsr	r20
 b9a:	f1 df       	rcall	.-30     	; 0xb7e <__fp_splitA>
 b9c:	08 c0       	rjmp	.+16     	; 0xbae <__fp_splitA+0x30>
 b9e:	16 16       	cp	r1, r22
 ba0:	17 06       	cpc	r1, r23
 ba2:	18 06       	cpc	r1, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	f1 cf       	rjmp	.-30     	; 0xb8a <__fp_splitA+0xc>
 ba8:	86 95       	lsr	r24
 baa:	71 05       	cpc	r23, r1
 bac:	61 05       	cpc	r22, r1
 bae:	08 94       	sec
 bb0:	08 95       	ret

00000bb2 <__fp_zero>:
 bb2:	e8 94       	clt

00000bb4 <__fp_szero>:
 bb4:	bb 27       	eor	r27, r27
 bb6:	66 27       	eor	r22, r22
 bb8:	77 27       	eor	r23, r23
 bba:	cb 01       	movw	r24, r22
 bbc:	97 f9       	bld	r25, 7
 bbe:	08 95       	ret

00000bc0 <__gesf2>:
 bc0:	b2 df       	rcall	.-156    	; 0xb26 <__fp_cmp>
 bc2:	08 f4       	brcc	.+2      	; 0xbc6 <__gesf2+0x6>
 bc4:	8f ef       	ldi	r24, 0xFF	; 255
 bc6:	08 95       	ret

00000bc8 <__mulsf3>:
 bc8:	0a d0       	rcall	.+20     	; 0xbde <__mulsf3x>
 bca:	80 c0       	rjmp	.+256    	; 0xccc <__fp_round>
 bcc:	71 d0       	rcall	.+226    	; 0xcb0 <__fp_pscA>
 bce:	28 f0       	brcs	.+10     	; 0xbda <__mulsf3+0x12>
 bd0:	76 d0       	rcall	.+236    	; 0xcbe <__fp_pscB>
 bd2:	18 f0       	brcs	.+6      	; 0xbda <__mulsf3+0x12>
 bd4:	95 23       	and	r25, r21
 bd6:	09 f0       	breq	.+2      	; 0xbda <__mulsf3+0x12>
 bd8:	62 c0       	rjmp	.+196    	; 0xc9e <__fp_inf>
 bda:	67 c0       	rjmp	.+206    	; 0xcaa <__fp_nan>
 bdc:	eb cf       	rjmp	.-42     	; 0xbb4 <__fp_szero>

00000bde <__mulsf3x>:
 bde:	c7 df       	rcall	.-114    	; 0xb6e <__fp_split3>
 be0:	a8 f3       	brcs	.-22     	; 0xbcc <__mulsf3+0x4>

00000be2 <__mulsf3_pse>:
 be2:	99 23       	and	r25, r25
 be4:	d9 f3       	breq	.-10     	; 0xbdc <__mulsf3+0x14>
 be6:	55 23       	and	r21, r21
 be8:	c9 f3       	breq	.-14     	; 0xbdc <__mulsf3+0x14>
 bea:	95 0f       	add	r25, r21
 bec:	50 e0       	ldi	r21, 0x00	; 0
 bee:	55 1f       	adc	r21, r21
 bf0:	aa 27       	eor	r26, r26
 bf2:	ee 27       	eor	r30, r30
 bf4:	ff 27       	eor	r31, r31
 bf6:	bb 27       	eor	r27, r27
 bf8:	00 24       	eor	r0, r0
 bfa:	08 94       	sec
 bfc:	67 95       	ror	r22
 bfe:	20 f4       	brcc	.+8      	; 0xc08 <__mulsf3_pse+0x26>
 c00:	e2 0f       	add	r30, r18
 c02:	f3 1f       	adc	r31, r19
 c04:	b4 1f       	adc	r27, r20
 c06:	0a 1e       	adc	r0, r26
 c08:	22 0f       	add	r18, r18
 c0a:	33 1f       	adc	r19, r19
 c0c:	44 1f       	adc	r20, r20
 c0e:	aa 1f       	adc	r26, r26
 c10:	66 95       	lsr	r22
 c12:	a9 f7       	brne	.-22     	; 0xbfe <__mulsf3_pse+0x1c>
 c14:	77 95       	ror	r23
 c16:	30 f4       	brcc	.+12     	; 0xc24 <__mulsf3_pse+0x42>
 c18:	f3 0f       	add	r31, r19
 c1a:	b4 1f       	adc	r27, r20
 c1c:	0a 1e       	adc	r0, r26
 c1e:	12 1e       	adc	r1, r18
 c20:	08 f4       	brcc	.+2      	; 0xc24 <__mulsf3_pse+0x42>
 c22:	63 95       	inc	r22
 c24:	33 0f       	add	r19, r19
 c26:	44 1f       	adc	r20, r20
 c28:	aa 1f       	adc	r26, r26
 c2a:	22 1f       	adc	r18, r18
 c2c:	76 95       	lsr	r23
 c2e:	99 f7       	brne	.-26     	; 0xc16 <__mulsf3_pse+0x34>
 c30:	87 95       	ror	r24
 c32:	20 f4       	brcc	.+8      	; 0xc3c <__mulsf3_pse+0x5a>
 c34:	b4 0f       	add	r27, r20
 c36:	0a 1e       	adc	r0, r26
 c38:	12 1e       	adc	r1, r18
 c3a:	63 1f       	adc	r22, r19
 c3c:	44 0f       	add	r20, r20
 c3e:	aa 1f       	adc	r26, r26
 c40:	22 1f       	adc	r18, r18
 c42:	33 1f       	adc	r19, r19
 c44:	86 95       	lsr	r24
 c46:	a9 f7       	brne	.-22     	; 0xc32 <__mulsf3_pse+0x50>
 c48:	86 2f       	mov	r24, r22
 c4a:	71 2d       	mov	r23, r1
 c4c:	60 2d       	mov	r22, r0
 c4e:	11 24       	eor	r1, r1
 c50:	9f 57       	subi	r25, 0x7F	; 127
 c52:	50 40       	sbci	r21, 0x00	; 0
 c54:	8a f0       	brmi	.+34     	; 0xc78 <__mulsf3_pse+0x96>
 c56:	e1 f0       	breq	.+56     	; 0xc90 <__mulsf3_pse+0xae>
 c58:	88 23       	and	r24, r24
 c5a:	4a f0       	brmi	.+18     	; 0xc6e <__mulsf3_pse+0x8c>
 c5c:	ee 0f       	add	r30, r30
 c5e:	ff 1f       	adc	r31, r31
 c60:	bb 1f       	adc	r27, r27
 c62:	66 1f       	adc	r22, r22
 c64:	77 1f       	adc	r23, r23
 c66:	88 1f       	adc	r24, r24
 c68:	91 50       	subi	r25, 0x01	; 1
 c6a:	50 40       	sbci	r21, 0x00	; 0
 c6c:	a9 f7       	brne	.-22     	; 0xc58 <__mulsf3_pse+0x76>
 c6e:	9e 3f       	cpi	r25, 0xFE	; 254
 c70:	51 05       	cpc	r21, r1
 c72:	70 f0       	brcs	.+28     	; 0xc90 <__mulsf3_pse+0xae>
 c74:	14 c0       	rjmp	.+40     	; 0xc9e <__fp_inf>
 c76:	9e cf       	rjmp	.-196    	; 0xbb4 <__fp_szero>
 c78:	5f 3f       	cpi	r21, 0xFF	; 255
 c7a:	ec f3       	brlt	.-6      	; 0xc76 <__mulsf3_pse+0x94>
 c7c:	98 3e       	cpi	r25, 0xE8	; 232
 c7e:	dc f3       	brlt	.-10     	; 0xc76 <__mulsf3_pse+0x94>
 c80:	86 95       	lsr	r24
 c82:	77 95       	ror	r23
 c84:	67 95       	ror	r22
 c86:	b7 95       	ror	r27
 c88:	f7 95       	ror	r31
 c8a:	e7 95       	ror	r30
 c8c:	9f 5f       	subi	r25, 0xFF	; 255
 c8e:	c1 f7       	brne	.-16     	; 0xc80 <__mulsf3_pse+0x9e>
 c90:	fe 2b       	or	r31, r30
 c92:	88 0f       	add	r24, r24
 c94:	91 1d       	adc	r25, r1
 c96:	96 95       	lsr	r25
 c98:	87 95       	ror	r24
 c9a:	97 f9       	bld	r25, 7
 c9c:	08 95       	ret

00000c9e <__fp_inf>:
 c9e:	97 f9       	bld	r25, 7
 ca0:	9f 67       	ori	r25, 0x7F	; 127
 ca2:	80 e8       	ldi	r24, 0x80	; 128
 ca4:	70 e0       	ldi	r23, 0x00	; 0
 ca6:	60 e0       	ldi	r22, 0x00	; 0
 ca8:	08 95       	ret

00000caa <__fp_nan>:
 caa:	9f ef       	ldi	r25, 0xFF	; 255
 cac:	80 ec       	ldi	r24, 0xC0	; 192
 cae:	08 95       	ret

00000cb0 <__fp_pscA>:
 cb0:	00 24       	eor	r0, r0
 cb2:	0a 94       	dec	r0
 cb4:	16 16       	cp	r1, r22
 cb6:	17 06       	cpc	r1, r23
 cb8:	18 06       	cpc	r1, r24
 cba:	09 06       	cpc	r0, r25
 cbc:	08 95       	ret

00000cbe <__fp_pscB>:
 cbe:	00 24       	eor	r0, r0
 cc0:	0a 94       	dec	r0
 cc2:	12 16       	cp	r1, r18
 cc4:	13 06       	cpc	r1, r19
 cc6:	14 06       	cpc	r1, r20
 cc8:	05 06       	cpc	r0, r21
 cca:	08 95       	ret

00000ccc <__fp_round>:
 ccc:	09 2e       	mov	r0, r25
 cce:	03 94       	inc	r0
 cd0:	00 0c       	add	r0, r0
 cd2:	11 f4       	brne	.+4      	; 0xcd8 <__fp_round+0xc>
 cd4:	88 23       	and	r24, r24
 cd6:	52 f0       	brmi	.+20     	; 0xcec <__fp_round+0x20>
 cd8:	bb 0f       	add	r27, r27
 cda:	40 f4       	brcc	.+16     	; 0xcec <__fp_round+0x20>
 cdc:	bf 2b       	or	r27, r31
 cde:	11 f4       	brne	.+4      	; 0xce4 <__fp_round+0x18>
 ce0:	60 ff       	sbrs	r22, 0
 ce2:	04 c0       	rjmp	.+8      	; 0xcec <__fp_round+0x20>
 ce4:	6f 5f       	subi	r22, 0xFF	; 255
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	08 95       	ret

00000cee <exit>:
 cee:	f8 94       	cli
 cf0:	a4 c0       	rjmp	.+328    	; 0xe3a <_exit>

00000cf2 <__udivmodsi4>:
 cf2:	a1 e2       	ldi	r26, 0x21	; 33
 cf4:	1a 2e       	mov	r1, r26
 cf6:	aa 1b       	sub	r26, r26
 cf8:	bb 1b       	sub	r27, r27
 cfa:	fd 01       	movw	r30, r26
 cfc:	0d c0       	rjmp	.+26     	; 0xd18 <__udivmodsi4_ep>

00000cfe <__udivmodsi4_loop>:
 cfe:	aa 1f       	adc	r26, r26
 d00:	bb 1f       	adc	r27, r27
 d02:	ee 1f       	adc	r30, r30
 d04:	ff 1f       	adc	r31, r31
 d06:	a2 17       	cp	r26, r18
 d08:	b3 07       	cpc	r27, r19
 d0a:	e4 07       	cpc	r30, r20
 d0c:	f5 07       	cpc	r31, r21
 d0e:	20 f0       	brcs	.+8      	; 0xd18 <__udivmodsi4_ep>
 d10:	a2 1b       	sub	r26, r18
 d12:	b3 0b       	sbc	r27, r19
 d14:	e4 0b       	sbc	r30, r20
 d16:	f5 0b       	sbc	r31, r21

00000d18 <__udivmodsi4_ep>:
 d18:	66 1f       	adc	r22, r22
 d1a:	77 1f       	adc	r23, r23
 d1c:	88 1f       	adc	r24, r24
 d1e:	99 1f       	adc	r25, r25
 d20:	1a 94       	dec	r1
 d22:	69 f7       	brne	.-38     	; 0xcfe <__udivmodsi4_loop>
 d24:	60 95       	com	r22
 d26:	70 95       	com	r23
 d28:	80 95       	com	r24
 d2a:	90 95       	com	r25
 d2c:	9b 01       	movw	r18, r22
 d2e:	ac 01       	movw	r20, r24
 d30:	bd 01       	movw	r22, r26
 d32:	cf 01       	movw	r24, r30
 d34:	08 95       	ret

00000d36 <__mulsidi3>:
 d36:	68 94       	set
 d38:	00 13       	cpse	r16, r16

00000d3a <__umulsidi3>:
 d3a:	e8 94       	clt
 d3c:	a0 e0       	ldi	r26, 0x00	; 0
 d3e:	b0 e0       	ldi	r27, 0x00	; 0
 d40:	e3 ea       	ldi	r30, 0xA3	; 163
 d42:	f6 e0       	ldi	r31, 0x06	; 6
 d44:	1d c0       	rjmp	.+58     	; 0xd80 <__prologue_saves__+0x10>
 d46:	ef ef       	ldi	r30, 0xFF	; 255
 d48:	e7 f9       	bld	r30, 7
 d4a:	59 01       	movw	r10, r18
 d4c:	6a 01       	movw	r12, r20
 d4e:	5e 23       	and	r21, r30
 d50:	55 0f       	add	r21, r21
 d52:	ee 08       	sbc	r14, r14
 d54:	fe 2c       	mov	r15, r14
 d56:	87 01       	movw	r16, r14
 d58:	9b 01       	movw	r18, r22
 d5a:	ac 01       	movw	r20, r24
 d5c:	9e 23       	and	r25, r30
 d5e:	99 0f       	add	r25, r25
 d60:	66 0b       	sbc	r22, r22
 d62:	76 2f       	mov	r23, r22
 d64:	cb 01       	movw	r24, r22
 d66:	3b d0       	rcall	.+118    	; 0xdde <__muldi3>
 d68:	cd b7       	in	r28, 0x3d	; 61
 d6a:	de b7       	in	r29, 0x3e	; 62
 d6c:	ea e0       	ldi	r30, 0x0A	; 10
 d6e:	24 c0       	rjmp	.+72     	; 0xdb8 <__epilogue_restores__+0x10>

00000d70 <__prologue_saves__>:
 d70:	2f 92       	push	r2
 d72:	3f 92       	push	r3
 d74:	4f 92       	push	r4
 d76:	5f 92       	push	r5
 d78:	6f 92       	push	r6
 d7a:	7f 92       	push	r7
 d7c:	8f 92       	push	r8
 d7e:	9f 92       	push	r9
 d80:	af 92       	push	r10
 d82:	bf 92       	push	r11
 d84:	cf 92       	push	r12
 d86:	df 92       	push	r13
 d88:	ef 92       	push	r14
 d8a:	ff 92       	push	r15
 d8c:	0f 93       	push	r16
 d8e:	1f 93       	push	r17
 d90:	cf 93       	push	r28
 d92:	df 93       	push	r29
 d94:	cd b7       	in	r28, 0x3d	; 61
 d96:	de b7       	in	r29, 0x3e	; 62
 d98:	ca 1b       	sub	r28, r26
 d9a:	db 0b       	sbc	r29, r27
 d9c:	0f b6       	in	r0, 0x3f	; 63
 d9e:	f8 94       	cli
 da0:	de bf       	out	0x3e, r29	; 62
 da2:	0f be       	out	0x3f, r0	; 63
 da4:	cd bf       	out	0x3d, r28	; 61
 da6:	09 94       	ijmp

00000da8 <__epilogue_restores__>:
 da8:	2a 88       	ldd	r2, Y+18	; 0x12
 daa:	39 88       	ldd	r3, Y+17	; 0x11
 dac:	48 88       	ldd	r4, Y+16	; 0x10
 dae:	5f 84       	ldd	r5, Y+15	; 0x0f
 db0:	6e 84       	ldd	r6, Y+14	; 0x0e
 db2:	7d 84       	ldd	r7, Y+13	; 0x0d
 db4:	8c 84       	ldd	r8, Y+12	; 0x0c
 db6:	9b 84       	ldd	r9, Y+11	; 0x0b
 db8:	aa 84       	ldd	r10, Y+10	; 0x0a
 dba:	b9 84       	ldd	r11, Y+9	; 0x09
 dbc:	c8 84       	ldd	r12, Y+8	; 0x08
 dbe:	df 80       	ldd	r13, Y+7	; 0x07
 dc0:	ee 80       	ldd	r14, Y+6	; 0x06
 dc2:	fd 80       	ldd	r15, Y+5	; 0x05
 dc4:	0c 81       	ldd	r16, Y+4	; 0x04
 dc6:	1b 81       	ldd	r17, Y+3	; 0x03
 dc8:	aa 81       	ldd	r26, Y+2	; 0x02
 dca:	b9 81       	ldd	r27, Y+1	; 0x01
 dcc:	ce 0f       	add	r28, r30
 dce:	d1 1d       	adc	r29, r1
 dd0:	0f b6       	in	r0, 0x3f	; 63
 dd2:	f8 94       	cli
 dd4:	de bf       	out	0x3e, r29	; 62
 dd6:	0f be       	out	0x3f, r0	; 63
 dd8:	cd bf       	out	0x3d, r28	; 61
 dda:	ed 01       	movw	r28, r26
 ddc:	08 95       	ret

00000dde <__muldi3>:
 dde:	df 93       	push	r29
 de0:	cf 93       	push	r28
 de2:	9f 92       	push	r9
 de4:	a0 e4       	ldi	r26, 0x40	; 64
 de6:	9a 2e       	mov	r9, r26
 de8:	00 24       	eor	r0, r0
 dea:	d0 01       	movw	r26, r0
 dec:	e0 01       	movw	r28, r0
 dee:	f0 01       	movw	r30, r0
 df0:	16 95       	lsr	r17
 df2:	07 95       	ror	r16
 df4:	f7 94       	ror	r15
 df6:	e7 94       	ror	r14
 df8:	d7 94       	ror	r13
 dfa:	c7 94       	ror	r12
 dfc:	b7 94       	ror	r11
 dfe:	a7 94       	ror	r10
 e00:	48 f4       	brcc	.+18     	; 0xe14 <__muldi3+0x36>
 e02:	10 68       	ori	r17, 0x80	; 128
 e04:	a2 0f       	add	r26, r18
 e06:	b3 1f       	adc	r27, r19
 e08:	c4 1f       	adc	r28, r20
 e0a:	d5 1f       	adc	r29, r21
 e0c:	e6 1f       	adc	r30, r22
 e0e:	f7 1f       	adc	r31, r23
 e10:	08 1e       	adc	r0, r24
 e12:	19 1e       	adc	r1, r25
 e14:	22 0f       	add	r18, r18
 e16:	33 1f       	adc	r19, r19
 e18:	44 1f       	adc	r20, r20
 e1a:	55 1f       	adc	r21, r21
 e1c:	66 1f       	adc	r22, r22
 e1e:	77 1f       	adc	r23, r23
 e20:	88 1f       	adc	r24, r24
 e22:	99 1f       	adc	r25, r25
 e24:	9a 94       	dec	r9
 e26:	21 f7       	brne	.-56     	; 0xdf0 <__muldi3+0x12>
 e28:	9d 01       	movw	r18, r26
 e2a:	ae 01       	movw	r20, r28
 e2c:	bf 01       	movw	r22, r30
 e2e:	c0 01       	movw	r24, r0
 e30:	11 24       	eor	r1, r1
 e32:	9f 90       	pop	r9
 e34:	cf 91       	pop	r28
 e36:	df 91       	pop	r29
 e38:	08 95       	ret

00000e3a <_exit>:
 e3a:	f8 94       	cli

00000e3c <__stop_program>:
 e3c:	ff cf       	rjmp	.-2      	; 0xe3c <__stop_program>
